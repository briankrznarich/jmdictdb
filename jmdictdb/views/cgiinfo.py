# Copyright (c) 2020 Stuart McGraw
# SPDX-License-Identifier: GPL-2.0-or-later

# This web page will show some details about the CGI/Python execution
# environment and is useful for diagnosing library location confusions.

# WARNING: The page generated by this view will show all items from the
# config.ini files, including those in the config-pvt.ini file (other
# than the db_* sections what are optionally supressed).

# NOTE: this view returns raw HTML rather than data to be rendered
# via a Jinja template.
# Note that unlike CGI scripts which read the jmdictdb config file on
# every html request, the jmapp script reads the config file only once
# when the webserver starts its Python subinterpreter and that configuration
# is used for all following html requests including this one.
# A restart of the Python subinterpreter can be requested without a full
# webserver restart by 'touch'ing the jmapp.wsgi file.

import sys, os, pdb
try: import pkgpath.py  # Make jmdictdb package available on sys.path.
except ImportError: pass

def view (app, params):
        '''-------------------------------------------------------------------
        app_config -- The value of the Flask.Application instance's
                      .config attribute.
        params -- URL parameters from the HTTP request.  Not currently used.
        -------------------------------------------------------------------'''
        try: import jmdictdb
        except ImportError:
            content = """\
                <h3>Failed to import jmdictdb</h3>
                Current directory is: %s<br>
                sys.path is: %r"""  % (os.getcwd(), sys.path)
            return Page % content
        from jmdictdb import jdb

        row_tmpl = "    <tr><td>%s</td><td>%s</td></tr>"

        exdata = []
        exdata.append (('cwd', os.getcwd()))
        exdata.append (('View location',
                     os.path.dirname (os.path.abspath (__file__))))
        exdata.append (('Pkg location',
                     os.path.dirname (os.path.abspath (jdb.__file__))))
        exdata.append (('sys.path', '%r' % sys.path))
        ex_rows = '\n'.join ([row_tmpl % (key.replace(' ','&nbsp;'), value)
                              for key,value in exdata])

        cfgdata, cfg = [], app.config['CFG']
        cfgdata.append (('config dir', cfg.get ('status', 'cfg_dir')))
        cfgdata.append (('config files',
                        cfg.get ('status', 'cfg_files').replace('\n','<br>')))
        cfg_rows = '\n'.join ([row_tmpl % (key.replace(' ','&nbsp;'), value)
                              for key,value in cfgdata])

        appdata = []
        appdata.append (('name', app.name))
        appdata.append (('root_path', app.root_path))
        appdata.append (('static_folder', app.static_folder))
        appdata.append (('static_url_path', app.static_url_path))
        appdata.append (('template_folder', app.template_folder))
        appdata.append (('instance_path', app.instance_path))
        app_rows = '\n'.join ([row_tmpl % (key.replace(' ','&nbsp;'), value)
                              for key,value in appdata])

        env_rows = '\n'.join ([row_tmpl % (key.replace(' ','&nbsp;'), value)
                              for key,value in sorted (os.environ.items())])

        html = Page % (ex_rows, cfg_rows, app_rows, env_rows)
        return html


Page = '''<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <title>JMdictDB - Configuration details</title>
  <style>.err {color:red;} td {vertical-align: top;} .pre {white-space: pre;}</style>
  </head>
<body>
  <p>Execution info:
  <table border=1>
    %s
    </table>
  <p>Config info:<br>
  <table border=1>
    %s
    </table>
  <p>App info:<br>
  <table border=1>
    %s
    </table>
  <p>Environment info:<br>
  <table border=1>
    %s
    </table>
'''
