============
INSTALLATION
============

Although this software was written and is maintained primarily
to support Jim Breen's JMdict and wwwjdic projects, you may
wish to install a local copy of this software:

- To contribute development work to the JMdict project.

- To use or adapt the code to a project of your own.

Requirements
------------
The code is currently developed and tested on Ubuntu using
Apache as a web server.  The webserver should be configured
to run Python CGI scripts.

Regarding Microsoft Windows:
Up to mid 2014 the code also ran and was supported on Microsoft
Windows XP.  However, current lack of access to a Windows machine
has required dropping Windows support but the Windows specific
code and documentation have been left in place in case support
is revived in the future.  PLEASE BE AWARE THAT REFERENCES TO
MICROSOFT WINDOWS IN THIS AND OTHER DOCUMENTATION AND CODE ARE
UNSUPPORTED AND MAY BE WRONG.

JMdictDB requires Python 3; Python 2 is no longer supported
although the last working Python 2 version is available in
the code repository in the branch, "py2-maint".

Some additional Python modules are also needed.  Version
numbers are the versions currently in use in the author's
development environment -- the software may work fine with
earlier or later versions, but this has not been verified.

  Postgresql [10.3]
  Python [3.6] (known not to work before 3.3).
  Additional Python packages:
    psycopg2-2.7.3 Python-Postgresql connector.
      http://initd.org/projects/psycopg2/
      http://stickpeople.com/projects/python/win-psycopg/ (Windows)
    ply-3.9 -- YACC'ish parser generator.
      http://www.dabeaz.com/ply/
    lxml-4.0.0 -- XML/XSLT library.  Used by xslfmt.py for doing
      xml->edict2 conversion.
    jinja2-2.9.6 -- Template engine for generating web pages.
  Apache [2.4] (on Unix/Linux/Windows systems)
  make -- Gnu make is required if you want to use the provided
    Makefile's to automate parts of the installation.
  wget -- Used by Makefile to download the JMdict_e.gz,
    JMnedict.gz, and examples.utf8.gz file from the Monash
    site.  If not available, you can download the needed
    files manually.

The principle developer had Cygwin (http://cygwin.com) installed
on his Windows development machine and used the make, wget, etc.,
programs provided by that package.  A smaller (though untested)
alternative might be to use the programs provided by the Gnuwin32
project: http://gnuwin32.sourceforge.net.

Database Authentication
-----------------------
Any program that accesses the database needs a username
and possibly a pasword to do so.  In a standard Postgresql
install, local connections made with user "postgres" do
not need a password, but your installation may require
you to use a username and password.

Most command line programs supplied by Posgresql, such
as psql, allow one to specify a user name but not a
password; the password will either be interactively
prompted for, or read from the user's ~/.pgpass [*1]
file.  Command line tools that are part of the JMdictDB
system generally allow a "-p" option for supplying a
password.  Using it on a multi-user machine is usually
a bad idea since another user, using "ps" or other
such commands, can view it.  The safest way of supplying
passwords is to use a .pgpass file.  See [*2] for more
info.

The database is accessed by the JMdictDB system in three
contexts:
 - When running the Makefile to install the JMdictDB
     system.
 - When cgi scripts are executed by the web server.
 - When a local (or remote if permitted) user runs
     the command line or GUI tools.

When the Makefile target "init" is run, it will create
two database users (by default, "jmdictdb" and "jmdictdbv").
The other targets create and load databases as user
"jmdictdb".  The "jmdictdbv" user is given read-only
access to the databases and is for use by the cgi scripts
and not further used by the Makefile.

When CGI scripts access the database, they do so using
a username obtained from the file config.ini (in python/lib
or the cgi lib/ directory.)  You need to create this file
from the config.ini.sample file supplied.  The usernames
in config.ini should match the usernames used by the
Makefile "init" target.
Passwords for these usernames may also be supplied in the
config.ini or config-pvt.ini file, but since the file must
be readable by the operating system user that the web server
runs as, you will want to limit read access to the file to
only the web server user.  Alternatively, you can install a
.pgpass file in the home directory of the web server user
to provide the passwords.

Editor Authentication
---------------------
JMdictDB provides a separate, application-level authentication
scheme for web access.  Users can login as Admin, Editor or
access the system anonymously by not logging in.
The CGI scripts allow anonymous users to submit
unapproved edited or new entries, but to approve or
reject entries, a user must be logged in as an editor.
A user logged in as admin can additionally manage other users.

The CGI scripts use a separate database named "jmsess" for
storing editor user info and active sessions.  This database
need only be setup once.

Getting the code
----------------
You can clone the development respository:

  git clone https://gitlab.com/yamagoya/jmdictdb.git

This will produce a "jmdictdb" directory in the current
directory.  You can also download a zip or gzip archive
of a particular version from GitLab:

  https://gitlab.com/yamagoya/jmdictdb/

Procedure
---------
Note: relative file paths below (except in command
lines) are relative to the package top level directory.

Installation involves:
1. Download and unpacking (or cloning) the JMdictDB software
  into a local development directory.
2. Install (if needed) and configure the Postgresql 
  database and Apache web servers.
3. Use the JMdictDB tools to load the database with dictionary data.
4. Optional: Installing the JMdictDB software per-user or
  system-wide.  The installed version is idependent of the
  code in the development directory allowing the latter to
  be changed without affecting the operation od the installed version.

A Makefile is provided that automates loading
the database and installing the JMdictDB software.  It is presumed that
there is a functioning Postgresql instance, and that
you have access to the database "postgres" account or
some account with enough privileges to create and drop
databases.

JMdictDB installation can be targeted to three locations:
1. Development: No "install" is done, the web pages are
  served, and command line tools aavailable, directly from
  the development directories.  No code is copied to
  any locations outside the development directories.
  Changes made to code
  or web pages are accessible immediately.
2. Per-user: cgi pages are installed in ~/public-html/,
  the jmdictdb Python package to ~/.local/lib/python...,
  and the command line programs to ~/.local/bin/.
3. System-wide: cgi pages are installed to /var/www/jmdictdb/,
  the jmdictdb Python package to the system Python libraries,
  and command line programs to /usr/local/bin/.
The default install directories for the per-user and system-
wide installs can be overridden with environment veriables 
when installing.  All three types of installs can coexist
simultaneouly.

By default, the main "production" database is named
"jmdict".  (Other databases are used when loading data,
for testing, etc.)  
The makefile targets that load data do so
into a database named "jmnew" so as to not destroy
any working database in the event of a problem.  A
make target, "activate" is provided to move the newly
loaded database to "jmdict".

No provision is made for concurrent access while loading
data; we assume that only the access to the database being
loaded is by the procedures used for the loading.  Use of
databases other than the one being loaded can continue as
usual during loading.

 

1. Install and configure
1. Choose passswords to use for Postgreql users "jmdictdb"
   and "jmdictdbv".

2. Copy the file jmdictdb/lib/config.ini.sample and .../config-pvt.ini
   in either the production lib/ directory (defined by macro
   LIB_DIR in the Makefile) or development web/lib/
   directory (same directory as the config.ini.sample file),
   depending on whether you plan on having your web server
   serve the application from the production location or the
   development directories.
   Edit it and make any changes necessary.  Uncomment and
   change the "pw" and "sel_pw" passwords in the "db_*" sections
   to the values chosen in step (1) above if you wish to supply
   passwords via this file (note warnings above.)  Otherwise
   create a .pgpass file in the web server user's home directory.
   The .pgpass file should have two lines in it:

        localhost:*:*:jmdictdb:xxxxxx
        localhost:*:*:jmdictdbv:xxxxxx

   Change the "xxxxxx"s to match the passwords chosen in
   step 1.  Permissions on the file must be 600 (rw-------)
   or Postgresql will ignore it.

3. When you run the Makefile in step 6 below, if there
   are passwords on the 'jmdictdb" and "postgres" accounts
   (or their equivalents if you've changed them in Makefile)
   and Postgresql does not know the passwords, you will be
   prompted to enter them (many times).  To prevent the
   prompting, tell postgresql the passwords by creating a
   (or editing a preexisting) .pgpass file in your home
   directory and add a line like:

        localhost:*:*:jmdictdb:xxxxxx
        localhost:*:*:postgres:xxxxxx

   Change the "xxxxxx"s to match the "jmdictdb" password
   chosen in step 1, and the "postgres" user password.  If
   PG_SUPER in the Makefile is changed (in next step) from
   "postgres" to some other user, adjust the second line
   above appropriately.
   Permissions on the file must be 600 (rw-------) or
   Postgresql will ignore it.

4. Check the settings in Makefile.  There are some
   configuration settings in the Makefile that you may
   want to change.  Read the comments therein.  In
   particular, the cgi directory is assumed to be
   ~/public_html/cgi-bin/.  You may wish to change that
   if you will be using the cgi files.  There are also
   some options for the Postgresql database server
   connections, including authentication settings.

5. Set (or modify) the enviroment variable PYTHONPATH
   so that it contains an absolute path to the python/lib
   directory.  For example, if you installed the jmdictdb
   software in /home/joe/jmdictdb/, then PYTHONPATH must
   contain (possibly in addition to other directories)
   /home/joe/jmdictdb/python/lib.

6. If you have not done so before, in the top-level directory,
   run

        make init

   to create the users/sessions database.  It will also
   create a single user with administration privilege,
   "admin" with password "admin".  As soon as the install
   is done, you need at a minimum to change the password.
   Changing the userid and password is better still.
   See the see section "Operation / User Management" below
   for more details.

7. (Optional) In the python/lib, run

        make

   This will make sure that the JEL parser files are
   up-to-date.  You can generally skip this step if you
   are running unmodified copy of the source (since an
   attempt is made to keep the distributed support
   files updated) but must do this if you've changed
   any of the support files' dependencies.

8. In the top level directory, run "make" which won't
   do anything other than list the available targets
   that will do something.

   If you are running on Microsoft Windows you should
   first set the client encoding for Postgresql by
   setting an environment variable:

        set PGCLIENTENCODING=utf-8

   To load JMdict, JMnedict, and Examples on a Unix-like
   machine, run:

        make loadall

   "make loadall" will create a database named "jmnew", download
   the needed XML files, then parse and load the JMdict, JMnedict,
   and Examples files into it and recreate the necessary foreign
   key constraints and indexes which were disabled during loading
   for performance reasons.  If any of the prerequistite files
   are already present (such as the .pgi files produced by the
   parsers), it will use them.  To force a complete reloading
   from scratch (except for the fetching which will be done only
   if the needed XML file are not present), use

        make reloadall

   To load a different set of corpora or in a different order
   you'll need to do the steps explicitly.  For example, to
   load JMdict and Kanjidic2, only, run make four times with
   the targets:

        make jmnew       # Create empty jmdictdb database.
        make loadjm      # Load JMdict
        make loadkd      # Load Kanjidic2
        make postload    # Resolve xrefs and update sequences.

   In particular "make postload" should always be run last to
   finalize a sequence of "make loadxx" operations.

   After the above "make" commands have completed sucessfully
   you will have a database named "jmnew" which can be examined
   to confirm the data is as expected.

   The "make" commands generate a lot of output and it is
   normal to see as fair number of warning and a few error
   messages while "make" is running -- files and database
   objects are often deleted or recreated to be sure that
   the environment is in a consistent state, and messages
   are produced if the objects are already gone or present.
   Unfortunately it is hard to tell what is a problem and
   what is normal short of experience running the install
   a number of times.

   Some of the more significant Makefile targets are:

   jmnew:
        Create a new database named "jmnew" with all
        jmdictdb tables and other database objects needed
        and ready to load data into.

   newdb:
        Create an cnmpletely empty database named "jmnew".
        (This can be useful if one wants to restore a
        jmdictdb database previously saved with pg_dump.)

   data/jmdict.xml:
        Download the current JMdict_e.gz file from the
        Moash FTP site, and unpack it.

   data/jmdict.pgi:
        Make target jmdict.xml if necessary, then parse
        the jmdict.xml file, generating a rebasable
        jmdict.pgi file and jmdict.log.

   loadjm:
        Make target jmdict.pgi if necessary, then load
        the .pgi file into preexisting database "jmnew"
        and do all the post-load tasks like creating
        indexes, resolving xref's etc. After this, the
        database should be fully loaded and functional,
        but is still named "jmnew" to avoid clobbering
        any existing and in-use "jmdict" database.

   loadall:
        Create database "jmnew" and load JMdict, JMnedict,
        and Examples into it.

   activate:
        Renames the "jmnew" database produced above to
        "jmdict", making it accessible to all the tools
        and cgi scripts.

   web:
        Copies the cgi and necessary library files to the
        the "production" location from where they can be
        served by a web server.  The default location is
        ~/public_html/.  See Step #10 below.

   There are similar sets of data/* and load* targets for
   loading JMnedict, the Examples file and Kanjidic2 (though
   kanjidic2 support, while usable, is still incomplete).
   Note that these targets expect to load their data into
   the "jmnew" database and thus should be executed before
   doing a "make activate".  Or alternatively, you can have
   them load directly into the active database (and losing
   the opportunity to validate the data before bringing it
   to the production database) by doing, for example,
   "make DB=jmdict loadex"

   Makefile will download JMdict_e.gz (or JMdict.gz if so
   configured), JMnedict.gz, and examples.utf8.gz as needed
   depending on the make targets used, using the 'wget'
   program.  If wget is not available you can download
   the needed files manually, and put them in the ./data/
   directory.

9. The makefile will parse the data files, create a database
   named "jmnew", load the jmdictdb schema, and finally load
   all the parsed data into it.  If everything was loaded
   sucessfully, run

        make activate

   which will rename any existing "jmdict" database to "jmold"
   (any existing "jmold" database is deleted), and rename the
   "jmnew" database to "jmdict", thus making it the active
   database and the one accessed by default by the cgi web
   pages.  There must be no active users in any of these
   databases or the "make activate" command will fail.

10. To use the cgi files with a web server, you can configure
   the web server to access the files directly from the development
   directories, or you can run:

        make web

   to install them to another location.  Check and adjust the
   settings in Makefile first.  The default location is
   ~/public_html/cgi-bin/ for the cgi files and ~/public_html/lib/
   for the supporting library files.

   IMPORTANT: the webserver should deny access to the lib/ directory
   as it contains sensitive infomation in some files.  'make web'
   will install a .htaccess file that restricts access but you may
   need to use a "AllowOverride Limit" or equivalent in the Apache
   configuration to allow it to take effect.

11. Create a config.ini file (use the python/lib/config.sample file
   as a guide).  The config.ini file should go in the same directory
   as the library files: in python/lib/ if you are serving the files
   directly from the development directories, or in $(WEBROOT)/lib/
   if you are installing the web files using 'make web' (or both).
   The config.ini file should be readable by the web server process
   and not readable by world (it will contain database passwords.)

   Create a log file as described in the OPERATION section below.
   It should be writable by the the web server process.

   You should now be able to go to the url corresponding to
   srchform.py and do searches for jmdict entries.  The url
   corresponding to edform.py will let you add new entries.

======================================================================
Notes:
[*1]
On Windows the Postgresql password file is typically in
"C:\Documents and Settings\<your_windows_user_name>\ -
  Application Data\Postgresql\pgpass.conf".  For brevity
we will refer simply to "~/.pgpass" in this document.

[*2]
For more information on usernames, passwords, and the .pgpass
file, see the Postgresql docs:
  31.15  Client Interfaces / libpq / The Password File
  31.1   Client Interfaces / libpq / Database Connection -
            Control Functions
  19     Server Administration / Client Authentication
  sec VI Reference / Postgresql Client Applications / -
            psql / Usage / Connecting to a Database
Note that chapter numbers are Postgresql version dependent.
Numbers given are for Postgres version 9.2.
