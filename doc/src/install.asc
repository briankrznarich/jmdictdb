= JMdictDB Installation Guide
:toc:
:sectnums:
:xrefstyle: short
:section-refsig:

Installing and Configuring JMdictDB

Although the JMdictDB software was written and is maintained
primarily to support Jim Breen's JMdict and wwwjdic projects
at https://edrdg.org, you may wish to install a local copy
of this software to:

- Run a local JMdictDB server for your own use.
- Contribute development work to the JMdict project.
- Use or adapt the code to a project of your own.

This document describes how to setup a functional instance
of a JMdictDB server including loading dictionary data.  An
instance of JMdictDB can be installed for development or
production or both.
The  primary difference is that for development the code is
run directly from a developer's local directory and web pages
served using a private web server built into the JMdictDB code.
For production use, the code is installed to dedicated system
locations: the jmdictdb Python package to a library directory
with other Python packages, the log and configuration files to
directories with other such files, the command line programs
to /usr/local/bin/, etc., and web pages are served using
high-capacity, robust exernal webserver.

The two primary external pieces of software that JMdictDB
uses, a Postgresql database server and Apache (or other
WSGI-capable) web server provide many different configuration
options.  How they are configured will depend on individual
site policies and preferences.
These instructions describe one possible set of choices based
on the author's experience; you should adjust them as needed
for your environment.

//FIXME: provide xrefs to the OPER and DEV (when done)
//docs here.

== Requirements

The JMdictDB code is currently developed and tested on Ubuntu
Linux using Apache-2.4/mod_wsgi as a web server and Postgresql
as the database server.  The JMdictDB web application should
be runnable with any WSGI-capable web server but to date has
only been tested with Apache.

NOTE: Earlier versions of this software generated web pages using
CGI scripts rather than a WSGI application as is used currently.
The CGI scripts are still present though unsupported.  For
information on configuration for CGI, please see versions of
this document prior to November 2021 (available in the Git
repository).

NOTE: Regarding Microsoft Windows:
Up to mid 2014 the code also ran and was supported on Microsoft
Windows XP.  However, lack of access to a Windows machine
necessitated dropping Windows support.  Please be aware that
lingering references to Microsoft Windows in this and other
documentation are outdated and unsupported.

JMdictDB requires Python 3; Python 2 is no longer supported
although the last working Python 2 version is available in
the code repository in the branch, "py2".

Some additional Python modules are also needed.  Version
numbers are the versions currently in use in the author's
development environment -- the software may work fine with
earlier or later versions, but this has not been verified.

  * Python [3.6] (known not to work before 3.3).
  * Additional Python packages.  These packages all have their
    own dependencies but those are usually installed
    automatically by the tool (e.g., pip, apt, dnf, etc)
    used to install the parent package):
  ** psycopg2-2.7.3 Python-Postgresql connector.
     (https://pypi.org/project/psycopg2/)
  ** ply-3.9 -- YACC'ish parser generator.
     (https://pypi.org/project/ply/)
  ** lxml-4.0.0 -- XML/XSLT library.  Used by xslfmt.py for doing
     xml->edict2 conversion.  (https://pypi.org/project/lxml/)
  ** flask-2.0 -- Web framework.  (https://pypi.org/project/Flask/)
  ** jinja2-3.0 -- Template engine for generating web pages.
     (https://pypi.org/project/Jinja2/)
  ** python-dateutil-2.6.1
     (https://pypi.org/project/python-dateutil/)
  * Postgresql [10.18] -- Database server (https://postgresql.org)
  * Apache [2.4] -- Web server  (https://httpd.apache.org/)
  ** mod_wsgi [4.5] -- WSGI module for Apache.
     (https://modwsgi.readthedocs.io/en/master/)
  * wget -- Used by Makefile-db to download the dictionary XML files.
   If not available, you can download the needed files manually.

If you plan on doing development of JMdictDB some additional
software, used in various build chains, is also required.
Please see xref:oper.asc#appx-A[Appendix A] of the
xref:oper.asc[Operation and Debugging Guide].

== Authentication
The Postgresql database requires applications connecting to it to
do so as a user known to the database server.  The JMdictDB software
itself requires some of its users to identify themselves to JMdictB
in order to perform certain actions.  This section describes the
authentication requirements of both as background for later
configuration details.

=== Database Authentication
We use the term "database server" when referring to the entire
Postgresql instance.  JMdictDB uses multiple, separate databases
within the database server.  For example, the database "jmdict"
is typically the "production" database while database "jmnew" is
used for loading dictionaries from source files.  There may be
a "jmtest" database and so on.

Any program that accesses the database server needs a username
and possibly a password to do so.  Note that these usernames
and passwords are distinct from the JMdictDB editor
usernames/passwords discussed in the next section and they
are distinct from the usernames/passwords used to log into
the operating system.

The database server is accessed by the JMdictDB system in two
contexts:

- When the web server receives an HTTP request for a JMdictDB
page and accesses the database in the course of generating the
web page response.

- When Postgresql and JMdictDB command line tools are run
by a user.  This includes their execution by the makefiles
during installation.

In the first case JMdictDB backend code will use database
usernames and passwords defined in the config-pvt.ini file
which will be described in more detail below.

In the second case, the database username and password may be
given on the command line, environment variables, or a .pgpass
file.  The last option is usually the most convenient and
secure and is the method documented below.  A detailed discussion
of Postgresql authentication methods is out of scope here but
<<appx-B>> provides some further references.

=== Editor Authentication
JMdictDB provides a separate, application-level authentication
scheme for web access.  Users can login as Admin, Editor or access
the system anonymously by not logging in.  The web pages allow
anonymous users to submit unapproved edited or new entries, but
to approve or reject entries, a user must be logged in as an Editor.
A user logged in as Admin can additionally manage other users.

JMdictDB users and their access levels are stored in a separate
separate database named "jmsess".  This database need only be
setup once.  Management of the user accounts in "jmsess" may be
done by the program bin/users.py (see <<users,section 7>> in this
document and xref:oper.asc#users[section 2] in the Operation Guide),
or, after the install is completed, by the users.py web page.

== Document conventions and placeholders
In the sections that follow the following placeholders should
be replaced with actual values:

  {{DEVDIR}}:: The local development directory where the JMdictDB
    code has been checked out to from Git.
    Example value: ~/devel/jmdictdb/
  {{URLROOT}}:: URL root that the Apache web server will be configured
    to serve the JMdictDB pages under.
    Example value: /jmdictdb (the web server will serve the JMdictDB
     pages under the URLs \https://localhost/jmdictdb/, e.g.,
     \https://localhost/jmdictdb/srchform.py)
  {{WEBROOT}}:: The location to install the web component files to.
    and where the web server will be configured to look for them at.
    Example value: /usr/local/jmdictdb/.
    The default value is /var/www/jmdictdb/.
  {{WCGI}}:: Path and filename of the .wsgi file (see section 6.2.3
   (<<prod-wsgifile>>).

//FIXME: is {{WSGI}} the full path and filename, or is it
// relative to {{WEBROOT}}?  Check usages.

== Common Development/Production Installation Steps

Setting up a JMdictDB instance involves:

1. Clone the JMdictDB software into a local directory.

2. Configure the Postgresql database server.

3. Use the JMdictDB tools to load the database with dictionary data.

4. Configure the .ini file(s) for the development server.

5. Configure the Apache web server.

6. Install the JMdictDB software.  This step installs the jmdictdb
  library package, command line programs and web scripts to
  locations independent of the development directory
  allowing the latter to be changed or deleted without affecting
  the operation of the installed version.

7. Configure the .ini file(s) for the production server.

Steps 1-3 are required whether JMdictDB is being installed for
development or production or both and are described in this
section.

Step 4 is required for running JMdictDB with the builtin Flask
development server and is detailed in section 5 (<<inst-dev>>) below.

Steps 5-7 are required for running JMdictDB under a production
web server like Apache and are detailed in section 6 (<<inst-prod>>)
below.

Makefiles are provided that automate loading the database
(Makefile-db) and installing the JMdictDB software (Makefile).

The following steps are generally needed whether you are setting
up a development instance or a production instance.

[#get-code]
=== Get the code
There are two main branches in the code:

- master: the latest version and the branch new development
  should generally be based on.
- edrdg: the version currently running at edrdg.org

Clone the JMdictDB repository at GitLab:

 $ git clone https://gitlab.com/yamagoya/jmdictdb.git {{DEVDIR}}

IMPORTANT: The JMdictDB install process involves building a
Python package with a version number that includes the Git
revision number.  Therefore you'll need the actual cloned
Git repository to install JMdictDB; a download (e.g., .tar.gz)
of the current files is not sufficient.

Update the version file to match the downloaded version:

  $ cd {{DEVDIR}}
  $ tools/upd-version.py

IMPORTANT: From here on, unless indicated otherwise, we assume
the current directory is the {{DEVDIR}} directory.

=== Configure the Postgresql database server

==== Provide access to the Postgresql server
[#pg_access]
JMdictDB accesses the Postgresql database using two dedicated
Postgresql database user accounts, by default named 'jmdictdb'
(for read-write access) and 'jmdictdbv' (for read-only access)
although those names can be changed in Makefile-db.  For routine
JMdictDB maintenance it is also convenient to have a personal
login to the database.  Some initial installation steps are
dome as database user "postgres".

Create a personal Postgresql login (replace <username> with
the postgresql user name you want to use, typically the same
as your OS login name):

  $ createuser -Upostgres -P --superuser <username>

and enter a password when prompted.

Create a ~/.pgpass file which will allow access to the
database server without the need to enter a password each
time a database command is run:

Choose passwords for the 'jmdictdb' and 'jmdictdbv' database
user accounts and determine the password (if one in needed)
for the 'postgres' user (or whatever the account specified
by PG_SUPER in Makefile-db is.)  This user is used when
creating the 'jmdictdb' and 'jmdictdbv' users.

In your home directory create a file named .pgpass with mode
600 and contents:

  localhost:*:*:<username>:<password>
  localhost:*:*:postgres:xxxxxx
  localhost:*:*:jmdictdb:yyyyyy
  localhost:*:*:jmdictdbv:zzzzzz

where "<username>" and "<password>" are the ones used when
creating the personal account and "xxxxxx", "yyyyyy" and
"zzzzzz" are **replaced with passwords of your choosing**.

IMPORTANT: Set the permissions on the .pgpass file to 600;
otherwise  Postgresql will ignore it and prompt you for
a password each time a Postgresql command is run.

==== Create the sessions database and Postgresql users
JMdictDB maintains user accounts for editors in a
separate database named "jmsess".  This step creates that
database and also create two Postgresql users that the
JM dictDB software uses when accessing the Postgresql
database server.

  $ make -f Makefile-db init

You will be prompted for the password to use for the new
'jmdictdb' database account.  Use the same passwords as
entered above in the ~/.pgpass file.

  Enter password for new role: yyyyyy
  Enter it again: yyyyyy

The same process is repeated for the 'jmdictdbv' account
(use the zzzzzz password this time.)

IMPORTANT: You need (and should) only do the
'make -fMakefile-db init' step once when installing JMdictDB
on a machine for the first time, even if you install the
JMdictDB software multiple times.

[#load-db]
=== Load the database
By default, the main "production" database is named "jmdict".
Other databases are used when loading data, for testing, etc.
The makefile targets that load data do so into a database
named "jmnew" so as to not damage any working database in
the event of a problem.  A make target, "activate" is
provided to move a newly loaded database to "jmdict".

The process is:

  $ make -f Makefile-db jmnew

Repeat the following, where "loadXX" is one of `loadjm` (JMdict),
`loadne` (JMnedict), `loadkd` (kanjidic2), `loadex` (Tatoeba
examples) for as many of the those sources as you want to load.
Each of the "loadXX" targets will download the appropriate source
file to the data/ directory, parse it and load the data into the
"jmnew" database.

  $ make -f Makefile-db loadXX

Then as the last step:

  $ make -f Makefile-db postload

As a shortcut, the target `loadall` will do the above for all
four of the dictionaries.

CAUTION: No provision is made for concurrent access while loading
data; we assume that the only access to the database being loaded
is by the procedures used for the loading.  However, use of
databases *other* than the one being loaded (which is usually
"jmnew") can continue as usual during loading.

If everything went well you can do:

  $ make -f Makefile-db activate

which rename the "jmnew" database to "jmdict".

[#inst-dev]
== Install For Development
=== Configuration files
Copy jmdictdb-pvt.ini-sample to jmdictdb-pvt.ini and edit it.

  - In the [flask] section, in the line
      key = xxxxxxxxxxxxxxxx
    replace the string of x's with a passphrase or better,
    a string of random characters.
  - Uncomment the ;pw and ;sel_pw lines and replace the
    "xxxxxx" with the passwords for the jmdictdb and
    jmdictdbv  users set in section 4.2.1 (<<pg_access>>)
    above.

Make sure that jmdictdb-pvt.ini is not world-readable:

  $ chmod 640 jmdictdb-pvt.ini

=== Run the Flask development server

The Flask web framework JMdictDB comes with a builtin
development server.  At this point you can:

  $ tools/run-mapjp.py web/lib/jmdictdb.ini
  Using cfgfile: /home/stuart/devel/jdb/jb/web/lib/jmdictdb.ini
   * Serving Flask app 'jmdictdb.jmapp' (lazy loading)
   * Environment: production
     WARNING: This is a development server. Do not use it in a production deployment.
     Use a production WSGI server instead.
   * Debug mode: on

You can now start a web browser and go to http://localhost:5000/ and
if all is well you will see the JMdictDB Advanced Search page.

//FIXME: this section commented out for now until have time to verify.
//  === Apache configuration (optional)
//  NOTE: The JMdictDB software should be able to run with any WSGI-capable
//  server but has to date been tested only with Apache-2.4/mod_wsgi.
//
//  For development this section is optional; the builtin Flask server
//  described above is both adequate and preferred for development.
//  However some problems may only appear when running under a
//  production server in which case you can configure Apache to
//  serve the JMdictDB pages directly from the development directory
//  rather than the separately installed "production" directory.
//
//  === Create a .wsgi file
//  The test and debug server built into Flask is useful for those
//  purposes.  However, sometimes is is useful or necessary to
//  examine the JMdictDB server running under Apache/mod_wsgi in
//  an environment close the production environment, possibly with
//  code that is not ready to be committed.
//  You can configure Apache to serve the development code directly
//  without any contention with the installed production instance.
//
//    # cd web/cgi/
//
//  Create jmapp.wsgi with the following contents:
//
//  ----
//    import sys, os
//    sys.wsgi_file = __file__   # See comments in views/cgiinfo.py.
//    p = os.path     # For brevity.
//    our_directory = p.dirname (__file__)
//      # Add our root directory to sys.path so that our development jmdictdb
//      #  package will be imported in preference to any system-installed one.
//    sys.path[0:0] = [p.normpath (p.join (our_directory, '../../'))]
//    import jmdictdb
//
//    if not os.environ.get('JMAPP_CFGFILE'):
//        default_cfgfile = p.normpath (p.join (our_directory, '../lib/jmapp.ini'))
//        os.environ['JMAPP_CFGFILE'] = default_cfgfile
//    from jmdictdb.jmapp import App as application
//  ----
//  === Apache configuration directives
//  Create an Apache .conf file with the following directives in
//  the system directory for such things (e.g., /etc/apache2/...)
//  or add the directives to an existing .conf file.
//
//  ----
//  WSGIDaemonProcess jmdev processes=2 threads=2 \
//      display-name=apache2-jmdev locale=en_US.UTF-8 lang=en_US.UTF-8
//  WSGIProcessGroup jmdev
//  WSGIScriptAlias {{URLROOTDEV}} {{DEVDIR}}/{{CGI}}/jmapp.wsgi \
//      process-group=jmdev
//
//    # Serve static files directly without using the app.
//  Alias "{{URLROOTDEV}}/web/" "{{DEVDIR}}"
//  <Directory {{DEVDIR}}/web/>
//      DirectoryIndex disabled
//      Require all granted
//      </Directory>
//  ----
//FIXME: add {{URLROORDEV}} to placeholder section.

[#inst-prod]
== Install For Production
[#inst-sw]
=== Install the JMdictDB software
The JMdictDB software is installed system-wide by:

 To install the upgraded code system-wide do the following.  The
commands must be run as a root user, perhaps using 'sudo'.

  # git config --global --add safe.directory {{DEVDIR}}
  # make WEBROOT={{WEBROOT}} install-sys

The WEBROOT=... part says where to install the web components and
may be left out if installing to the default location of
/var/www/jmdictdb/.

The 'git config' command is needed to override security protections
added to Git in April 2022.  For more details see:
  https://github.blog/2022-04-12-git-security-vulnerability-announced/
If you wish, you can undo the Git configuration change after the
install is done with,

  # git config --global --unset safe.directory {{DEVDIR}}

It is also possible to install the software to per-user specific
locations (see below) using:

  $ make install-user

However this can lead to library confusions when running the
the development server and is thus not recommended.

The 'install-sys' target will, by default, install to the following
locations:
[none]
* {blank}
+
[%autowidth]
|===
| Web files              | /var/www/jmdictdb/
| CGI/WSGI scripts [*]   | /var/www/jmdictdb/cgi-bin/
| Admin files            | /var/www/jmdictdb/lib/
| Command line programs  | /usr/local/bin/
| Python library modules | /usr/local/lib/pythonX.Y/dist-packages/ [**]
|===

For 'install-user' the locations are:
[none]
* {blank}
+
[%autowidth]
|===
| Web files              | ~/public_html/
| CGI/WSGI scripts [*]   | ~/public_html/cgi-bin/
| Admin files            | ~/public_html/lib/
| Command line programs  | ~/.local/bin/
| Python library modules | ~/.local/lib/pythonX.Y/site-packages/jmdictdb/ [**]
|===
[small]#[*] -- The CGI scripts in here are deprecated and will
be removed in a future version.#
+
[small]#[**] -- The exact location is determined by Python.  X and
Y are the major and minor version numbers of the installed Python.#

Next you will need to tell the Apache web server where to
find the web components and at what URL to serve them.

[#config_ini]
=== Configuration files.
The JMdictDB configuration and log files are located in {{WEBROOT}}/lib/.

==== Create the log file.
The name, "jmdictdb.log" may be changed to whatever name is
preferred.  If changed, the value of LOGFILE in the configuration
file (next section) will need to match.
The file's permissions must allow the web server process to
write to it.

  # cd {{WEBROOT}}/lib/
  # touch jmdictdb.log
  # chgrp www-data jmdictdb.log
  # chmod 664 jmdictdb.log

"www-data" is the user name the web server typically runs
under on Debian-derived systems; you may need to change it
to something different on other OS distributions.

The JMdictDB software tries not to write sensitive information
like passwords to the log file but like all software is not
perfect.  Additionally different sites will have different
definitions of "sensitive".  You may wish to use a permissions
value of 660 rather than 664 on the log file.

==== Create the jmdictdb.ini file
Copy jmdictdb.ini-sample to jmdictdb.ini and edit it, guided by
the comments.  Note that relative file locations in the config
files are relative to the config file directory.
In particular the following should be changed:

In the [web] section, uncomment the line:

  #CONTACT_EMAIL =

and provide an appropriate value, for example:

  CONTACT_EMAIL = jmdictdb-admin@myorg.com

In the [logging] section uncomment the line:

  #LOG_FILENAME =

and set the value to the location of the log file created in
the previous section.  For example:

  LOG_FILENAME = jmdictdb.log

[#prod-wsgifile]
==== Create the jmdictdb-pvt.ini file
Copy jmdictdb-pvt-sample.ini to jmdictdb-pvt.ini and edit it.

In the [flask] section, in the line:

  key = xxxxxxxxxxxxxxxx

replace the string of x's with a passphrase or better, a string of
random characters.  A convenient way to generate such a string is
with any of the online password generator websites.

Uncomment the ;pw and ;sel_pw lines and replace the
"xxxxxx" values with the passwords for the jmdictdb and
jmdictdbv  users set in section 4.2.1 (<<pg_access>>) above.

Make sure that jmdictdb-pvt.ini is not world-readable but is
readable by the Apache webserver process:

  # chmod 640 jmdictdb-pvt.ini
  # chgrp www-data jmdictdb-pvt.ini

where "www-data" is the web server process user (typical for
Debian-derived systems, may be different in other distributions.)

==== Create a .wsgi file
This file is a shim between Apache and the JMdictDB software.
Its name is specified in the Apache configuration directives
(see below) and its job is to load the JMdictDB Flask module
into Apache's mod_wsgi processes when they are started.  It
can be placed in any directory the web server has been configured
to execute a wsgi script from.  The existing CGI script directory
may be convenient if it allows the execution of WSGI scripts,
or you can create a new directory, for example: {{WEBROOT}}/wsgi/.

  # cd {{WEBROOT}}/{{WSGI}}/

Create a file, jmdictdb.wsgi, with the following contents:

  import sys, os
  import jmdictdb
  sys.wsgi_file = __file__   # See comments in views/cgiinfo.py.
  if not os.environ.get('JMDICTDB_CFGFILE'):
      p = os.path
      our_directory = p.dirname (__file__)
      default_cfgfile = p.normpath(p.join (our_directory,'../lib/jmdictdb.ini'))
      os.environ['JMDICTDB_CFGFILE'] = default_cfgfile
  from jmdictdb.flaskapp import App as application

If you placed the .wsgi file in a directory other than a sibling
directory of {{WEBROOT}}/lib/ or you chose to use a filename other
than jmdictdb.ini, you will need to adjust the relative path and/or
filename in the `default_cfgfile=...` line in the .wsgi file above.

[#apache_config]
=== Configure the Apache webserver
JMdictDB uses a WSGI application to serve pages via the Apache
web server with the mod_wsgi module.  The location of the JMdictDB
files and configuration parameters for mod_wsgi are provided to
the Apache web server using normal Apache configuration directives.

The following configuration directives can go in the main Apache
configuration file, or at most sites, in a separate .conf file in
a configuration directory.  Refer to the Apache documentation for
specifics.
----
WSGIDaemonProcess jmwsgi processes=2 threads=10 \
    display-name=apache2-jmwsgi locale=en_US.UTF-8 lang=en_US.UTF-8
WSGIProcessGroup jmwsgi
WSGIScriptAlias {{URLROOT}} {{WEBROOT}}/web/wsgi/jmdictdb.wsgi \
    process-group=jmwsgi

  # Serve static files directly without using the app.
Alias "{{URLROOT}}/web/" "{{WEBROOT}}/web/"
<Directory {{WEBROOT}}>
    DirectoryIndex disabled
    Require all granted
    </Directory>
----
The number of process and threads can be adjusted depending of server
capacity (number of cores, amount of memory, etc) and expected request
load.  For more information see:

  https://modwsgi.readthedocs.io/en/latest/user-guides/processes-and-threading.html

Restart the web server.

==== Verify web access

You should now be able to view any of the JMdictDB web pages
in your web browser.

If you did a system install in section 6.1 (<<inst-sw>>) the URL will be:

  https://localhost/{{URLROOT}}/srchform.py

If you did a user install in section 6.1 (<<inst-sw>>) the URL will be:

  https://localhost/~<USERNAME>/srchform.py

where <USERNAME> is your username.

[#users]
== Add JMdictDB editors and admins
The JMdictDB web interface allows anyone to view entries and
to submit provisional entries.  To approve entries one must
login as an Editor and to manage other users (add, delete,
modify, etc.) one must login as an Admin.  User management
can be done from the users.py web page but you need to create
an initial Admin user before you can access that page.

To add an initial admin user:

  $ bin/users.py -d jmsess add <username> -pa --pw

You will be prompted to enter a password for the user.
You can now visit \http://localhost/{{URLROOT}}/users.py with
a web browser.  The page will initially say that access is not
allowed but if you login with the username and password of
the user you just added, you will get access and be able
to change that user's details (add a full name for example)
and add and modify other users.  Or if you prefer you can
continue to manage users directly with the users.py program.

For full details on using users.py, view its help:

   $ bin/users.py --help

== Upgrading the JMdictDB software
// This is a section so that it will appear prominently
// in the table of contents.
The process for upgrading JMdictDB is covered in the
xref:oper.asc#upgrading[Upgrading JMdictDB]
section of the
xref:oper.asc#header[Operation and Debugging Guide].

:sectnums!:
[#errors]
== Appendix A: Common problems
//FIXME: formatting bad in q&a section below.
[qanda]
Flask server fails with traceback::
  This will happen when tools/upd-version.py hasn't been run
  (see section 4.1, <<get-code>> )

  Traceback (most recent call last):
    File "tools/run-flask.py", line 45, in <module>
      main()
    File "tools/run-flask.py", line 32, in main
      from jmdictdb import flaskapp
    File "/home/stuart/jmdictdb/tools/../jmdictdb/__init__.py", line 1, in <module>
      from . import __version__
  ImportError: cannot import name '__version__' from partially initialized module 'jmdictdb' (most likely due to a circular import) (/home/stuart/jmdictdb/tools/../jmdictdb/__init__.py)

"500 - Server Error" web page returned::
  Check the web server's error log.  There will often be a Python
  stack dump from the JMdictDB code that will identify the problem.

JMdictDB error page: "Unavailable service (xxxx)"::
  Either the service name given in the "svc=..." URL parameter
  ("xxxx" in the example) is not defined in config-pvt.ini (or
  the equivalent file) or the database in the service definition
  does not exist in the Postgresql server.

file not found: .../config.ini::
  There needs to be a lib/config.ini file, even if it is empty.

postgresql authentication error / fe_sendauth: no password supplied::
  Example:

    svc=db_foo
    postgresql authentication error
    fe_sendauth: no password supplied
+
The db access section named [db_foo] is either missing
from the config-pvt.ini or config.ini file or it is
present but the username and/or password for the database
server are wrong.

api requires updates xxxxxx / db has updates xxxxxx::
  The version of the API (in jmdictdb/dbver.py) in different than
  the database version (in table "db" or more conveniently viewable
  in view "dbx").  If the API version is newer, you need to apply
  the appropriate updates from db/updates/.  If older, since there
  is no easy way to "downgrade" a database, you'll need to find
  an older database of the correct version or load a database from
  source files (eg JMdict XML).

No entries in jmdictdb log file::
* Check the web server's error log file.  If the JMdictDB
  log file can't be opened for writing an error message to that
  effect will be written to stderr which should appear in the web
  server error log file.
* Check the config.ini file.  The default log file name and
  location is web/lib/jmdictdb.logout can be overridden in
  the config.ini file.
* Make sure the log file is writable by the web server process.

[#appx-B]
== Appendix B: Postgresql authentication documentation
For more information on Postgresql usernames, passwords and
the .pgpass file, see the Postgresql docs:

33.15 Client Interfaces / libpq / The Password File::
  https://www.postgresql.org/docs/10/libpq-pgpass.html
31.1 Client Interfaces / libpq / Database Connection - Control Functions::
  https://www.postgresql.org/docs/10/libpq-connect.html
20 Server Administration / Client Authentication::
  https://www.postgresql.org/docs/10/client-authentication.html
  sec VI Reference / Postgresql Client Applications / psql / Usage / Connecting to a Database::
  https://www.postgresql.org/docs/10/app-psql.html#R2-APP-PSQL-CONNECTING

Note that chapter numbers may vary between Postgresql versions and
these are for Postgresql version 10.
