== November 2021 Upgrade

=== Instructions for updating a production JMdictDB server

This document provides instructions to configure an existing JMdictDB
site to utilize the new WSGI/Flask framework backend.  If you are
installing JMdictDB for the first time please see
link:INSTALL.html[INSTALL.html] instead.  Please note that the CGI
backend remains fully functional for now but is deprecated and will
be removed in a future update.

With this update:

* The CGI pages will continue working unchanged at their current
  URLs.  Access to the WSGI-served pages is provided by a different
  set of URLs.  (Note that logins are not shared, being logged in
  on a CGI page will not make you logged in on a WSGI page.)
* The WSGI code uses the same page templates and same "guts" code
  as the CGI pages; pages served via WSGI should look and act
  identically to the CGI versions.

With CGI, when an HTTP request arrives at the web server the server
starts a new instance of the Python interpreter to run the CGI script
that handles that particular kind of request.  Because Python is a
large, resource hungry program, starting it anew for every request
is expensive in terms of both time and resources.

With WSGI, a Python interpreter running the Flask framework is
started when the web server starts.
footnote:[Actually mod_wsgi in the web server will typically start
several Python processes, each with several threads to which incoming
requests are assigned but the idea and effect are the same.]
Each incoming HTTP request is handled by, in effect, calling a
function in the already running Python process which is much faster
and less resource hungry than starting a new Python process each
time.

Additionally, the Flask web framework allows simplifying the
JMdictDB server code and improving its security by providing
better support for things like login/logout and cookies.

=== 1. Upgrade stages
Complete transition from the CGI to the WSGI backend may be
done in stages to gain confidence at each stage before moving to
the next and to preserve fallback capability in case unforeseen
problems are encountered.

These instructions address only Stage 1; the timing and details of
the other stages can be determined later.

Stage 1:: Activate the WSGI backend on a new set of URLs, leaving
the current CGI URLs unchanged.  The new URLs can be provided to
users for testing and feedback while others continue to use the CGI
URLs as they do now.

Stage 2:: After confidence has been established in the compatibility
and reliability of the WSGI version, web server redirects can be put
in place to redirect all users to the WSGI version via the existing
CGI URLs.

Stage 3:: After a suitable advance notice period to allow users
time to update bookmarks, etc., the redirects can be removed and
the WSGI URLs will now provide the only access to the JMdictDB web
backend.

=== 2. Operational and user visible changes
The following are the major differences from the CGI version that
will be encountered with the WSGI version.

==== 2.1 Editors required to enable cookies
Logged in editors will have to have cookies enabled for the
JMdictDB site in order to stay logged in.  Login/logout services
are now provided by the Flask framework using secure, encrypted
cookies to maintain session state; supplying SID values in the
URL will no longer work.

As before with CGI, cookies are not required for non-logged in
users.

==== 2.2 Code changes aren't immediately effective
When the JMdictDB code is upgraded or otherwise modified the changes
will not be immediately visible because the actual code loaded and
running in the web server is unchanged.  To put the changes into
effect one can either:

  * Restart the Apache webserver

or, to avoid a full restart:

  * Change the "modified" date on the file
    {{WEBROOT}}/{{CGI}}/jmapp.wsgi
    with, for example, the 'touch' command.

This will cause a restart of only the jmapp Python processes.

==== 2.3 Different config and log file names.
One can use the the same configuration and log files for the CGI
and WSGI server versions but it can help avoid confusion if they
are kept separate, at least initially.  The instructions below
do that.  The format of the contents of both are the same though.

=== 3. Installation

In this section the following are used as placeholders and should
be substituted with actual values.

*  {{DEVDIR}} -- The local directory into which the JMdictDB
   software has been cloned from the GitLab JMdictDB repository.
   Example: /home/me/jmdictdb-dev
*  {{WEBROOT}} -- The directory to which the JMdictDB web files are
   installed and from where the web server has been configured to
   serve them.  Example: /usr/local/apache2/jmdictdb
*  {{CGI}} -- The cgi directory under {{WEBROOT}}.  Example: cgi-bin
*  {{URLROOT}} -- The virtual directory in which the JMdictDB pages
   will appear in URL-space.  Example: jmapp (the URLs for the
   JMdictDB pages will, assuming a host name of edrdg.org for example,
   start with \https://edrdg.org/jmapp/...)

==== 3.1. Perform a normal code upgrade.

If you have a checkout of JMdictDB already:

  cd {{DEVDIR}}
  git checkout master
  git pull

Otherwise you can clone the JMdictDB repository:

  $ git clone https://gitlab.com/yamagoya/jmdictdb.git {{DEVDIR}}
  $ cd {{DEVDIR}}

The following 'make' command needs to be run as root, either
from a *root login* or via *sudo*.  It installs the JMdictDB Python
package to the (Python determined) system-wide location, the
command line programs to /usr/local/bin/, and updates any CGI
and WSGI scripts. 

  # cd {{DEVDIR}}
  # sudo make WEBROOT={{WEBROOT}} install-sys

The WEBROOT=... part can be left out if you want to install to
the default location of /var/www/jmdictdb/.

==== 3.2 Config and log files

While it is possible for both the CGI and WSGI backends to share
the same log and configuration files, it is less confusing during
the transition period to keep them separate.

3.1.1. Create a new log file.  The name, "jmapp.log" may be changed
to whatever name is preferred.

  # cd {{WEBROOT}}/lib/
  # touch jmapp.log
  # chgrp www-data jmapp.log
  # chmod 664 jmapp.log      # Can use 660 if preferred.

3.1.2. Copy the existing config.ini file.

  # cp config.ini cfgapp.ini

3.1.3. Edit cfgapp.ini and change the name of the log file to match
what was chosen above.  The name of the private ini file can remain
the same (ie, the private ini file can be shared by both the CGI and
WSGI backends since we assume both will be accessing the same
databases with the same credentials.)

The name, "cfgapp.ini", can be changed to something else if desired 
in the file web/cgi/jmapp.wsgi.

==== 3.3 Apache web server configuration

Use the Apache configuaration directives below.  They can go either
into a separate .conf file (e.g., jmapp.conf) in the Apache directory
for such files, or can be added to an existing configuration file
(you may have an existing jmdictdb.conf file for example.) 
 
Replace {{WEBROOT}} (3 occurences) with the same value used above in
the  'make install-sys' command, e.g.: /usr/local/apache2/jmdictdb/.

Replace {{CGI}} (1 occurrence) with the CGI directory
name.  Example: cgi-bin (so that the full path with {{WEBROOT}}
also replaced might be something like
/usr/local/apache2/jmdictdb/cgi-bin/)

Replace {{URLROOT}} (2 occurrences) with the top level virtual directory
that the JMdictDB pages will be served under.  For example, using "/jmapp"
will result in the JMdictDB pages being available at
\https://edrdg.org/jmapp/..., etc.

----
WSGIDaemonProcess jmapp processes=2 threads=10 \
    display-name=apache2-jmapp locale=en_US.UTF-8 lang=en_US.UTF-8
WSGIProcessGroup jmapp
WSGIScriptAlias {{URLROOT}} {{WEBROOT}}/{{CGI}}/jmapp.wsgi \
    process-group=jmapp

  # Serve static files directly without using the app.
Alias "{{URLROOT}}/web/" "{{WEBROOT}}"
<Directory {{WEBROOT}}>
    DirectoryIndex disabled
    Require all granted
    </Directory>
----

The above file defines the URL for the WSGI versions of the JMdictDB
pages in the Alias line.  Using a host name of edrdg.org for example,
the WSGI version of the search page would be at
 \https://edrdg.org/jmapp/srchform.py

The number of process and threads can be adjusted depending of server
capacity (number of cores, amount of memory, etc) and expected request
load.  For more information see the mod_wsgi documentation:
https://modwsgi.readthedocs.io/en/latest/user-guides/processes-and-threading.html

=== 3.4 Restart the web server

This is required to read the new configuration.  After the web
server has been restarted pointing a browser to the URL (and again
using a host name of edrdg.org as an example)

  https://edrdg.org/jmapp/srchform.py

should result in the Advanced Search Page being shown.

CAUTION: The WSGI pages do not access a test version of the database;
changes made via the WSGI pages will appear in the production database
just as if they'd been made through the CGI version.

NOTE: If the web server won't restart, the web server error logs may
have more information.
