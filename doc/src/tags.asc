:icons: font
== Procedure to add or modify JMdictDB tags
This document describes the procedure for implementing a "glocal"
change to the JMdictDB tags -- that is, a change that will be
incorporated in the JMdictDB distribution and distributed to
all users of the JMdictDB software (both of them.)  This is in
contrast to a local tag change that can be made in the database
tables at a particular site.

There are three places that need changes:

  * the kw*.csv file(s) that define the tags values (section <<sec3>>),
  * the DTD template files (section <<sec4>>)
  * a SQL database update script to propagate the changes to any
    existent databases (section <<sec5>>).

We assume you've set up a development environment per
link:dev.html[Development Environment].

=== 1. Create a git branch for the tag changes work
     $ cd <your development directory>
     $ git status

Git should say "working directory clean" or list only "untracked
files".

   $ git checkout master
   $ git checkout -b newtags

You can replace "newtags" with any branch name you want.

=== 2. Run the tests.

   $ cd tests
   $ ./runtests.py

If there are errors they should be fixed before continuing.
This will prevent confusing preexisting errors with errors
resulting from your tag changes.
[#sec3]
=== 3. Edit the appropriate csv file(s)
The kw*.csv files in jmdictdb/data/ are the canonical source
of static tag information in JMdictDB.

If you are adding a new tag, add a line defining the new tag to
the appropriate .csv file in jmdictdb/data/.  Each line consists
of three tab-separated fields:

  id -- The next sequential number [*]
  kw -- A short abbreviation for the tag.
  descr -- A longer (but one line) description of the tag.  If the
    text contains any double-quote characters (") the entire descr
    text should be enclosed in double-quotes and each embedded
    double-quote should be doubled (ie, each " changed to "").
  TODO -- examine conflicts with same kw value in other domains.

[*] In some of the csv files there are there are groupings of id numbers.
In kwmisc.csv for example id numbers above 180 are used for JMnedict
tags.  In such cases use the next sequential number in the group you
are adding the tag to.

If you are changing an existing tag, edit the appropriate
line.  Caution: in general the "descr" can be changed arbitrarily
but you should be cautious about changing the "kw" field
value as it may be referenced in the code and need corresponding
changes there are well.  A grep through all the .py
files for the text "XXX['kkk']" or "XXX_kkk" (where XXX is the
tag type, eg FREQ, POS, etc, and kw is the short abbreviation of
the tag (the value you want to change) may (but is not guaranteed to)
turn up such cases.

In particular the following tags are known to be referenced in the
jmdictdb code:

  FREQ (all), GINF ('eql','lit'), LANG ('eng'), MISC ('male','fem'),
  STAT (all), SRCT (all), XREF('see','ant')

There may be others.

Note too that if the tag will be used as an entity in a DTD, the
tag name should be the same as the entity name and the description
should be the same as he entity value.

Be careful that your editor is set to preserve tabs (including
trailing ones) when saving rather than replacing them with spaces.

[#sec4]
=== 4. Update the DTD template files
If the tag is also used as an XML entity in either of the JMdict
or JMnedict DTDs the corresponding entity should be updated in the
DTD template files (jmdictdb/data/dtd-jmdict.xml,
jmdictdb/data/dtd-jmnedict.xml).

The tag name and entity name should be the same, as should the tag
description and entity value.

[#sec5]
=== 5. Write a database update file to update existent databases
The csv files contain the canonical tag definitions and are
loaded into a jmdictdb database when it is first created but changes
made to the csv files afterwards are not automatically propagated
to existing databases -- that is done by the script you write here.

Generally, adding a new tag or changing a tag's description text is
simple.  Changing a tag's name (aka keyword) or deleting a tag is
more complicated because a history record needs to be created for
any entries that use the tag.  Were that not done, someone looking
at an entry's history in the future could be confused by the absence
of a tag that was shown as added in the past, or presence of a tag
with no earlier history showing its addition.
The cause may be obvious in the case of a single tag change but with
multiple changes over time it could be impossible to determine the
entry's history accurately.
Even if it is known that a particular database doesn't have any
entries using the tag, the update script has to be usable on *any*
database.

After the database has been updated the tag changes will automatically
appear in the Search and Help pages.

This procedure applies only to the change of tag changes that don't
require any change to the database schema or jmdictdb code.  If that
is not true, additional steps are required that are beyond the scope]
of these instructions.

==== 5.1 Procedure
Create a new database update file in db/updates/ named:

  nnn-xxxxxx.sql

where nnn is a sequential 3-digit decimal number (use the next highest
number from the update files already in db/updates/) and "xxxxxx" is
a random 6-digit hexadecimal number.  On way of generating it is to
use the command:

  python -c 'import random;print("%06.6x"%random.randint(0,16777215))'

Use this template for the contents of the new update file:

[source,sql]
----
\set ON_ERROR_STOP
BEGIN;

-- Comment summarizing the update
-- Additional comments providing more detail if needed.
-- [...]

\set dbversion  '''xxxxxx'''  -- Update version applied by this update.
INSERT INTO db(id) VALUES(x:dbversion::INT);

-- Do the update...

[sql statements to implement the update, as described below in
the following sections and Appendix A, go here.]

COMMIT;
----
Replace "xxxxxx" in the template with same "xxxxxx" you generated
above for the filename.  Replace the "[sql statements...]" lines
with the SQL statements needed to implement the changes.  See the
following sections for more details on that.

Note that the tag changes are done inside a transaction: if there
is an error when you run the script the database is left unchanged
so you can simply correct the error and rerun -- no need to undo
a partially applied update.

==== 5.2. Add a new tag
For adding new tags use a simple INSERT statement:

  INSERT INTO <table-name> VALUES (<id-number>, '<tag-name>', '<description>');

<table-name> is the same as the kw*.csv filename sans the ".csv"
extension.
<id-number> is the id number of the new tag, <tag-name> is the short
tag name, and <description> is a single line longer description.  All
three values should be the same as in the csv file (sans quotes as
mentioned next).

Both <tag-name> and <description> must be enclosed in single quotes.
If there is a single quote (') in the text it should be doubled ('').
If you copied the text from the csv file un-double any doubled double
quotes ("" -> ").

If the tag will be an entity in the JMdict or JMnedict XML DTDs,
<tag-name> must be the same as the entity name and <description>
the same as the entity value.

==== 5.3. Tag description change
Change a tag's description text using a SQL UPDATE statement:

  UPDATE kwpos SET descr='<new description>'
    WHERE kw='<tag-name>' AND descr='<old description>'

Note that if a single-quote (') occurs within the description
text it needs to be doubled ('').

==== 5.4 Tag name change or tag deletion
The SQL for these cases is a little more complicated due to the
aforementioned need to create a history record.  Please refer
to Appendix A for the appropriate SQL.

=== 6. Test on a copy of the production database:
Make copy of the production database and apply the update to it:

  $ dropdb <dev-database-name>
  $ createdb -Ojmdictdb <dev-database-name>
     # Following statement assumes production database is named "jmdict".
  $ pg_dump jmdict | psql -d <dev-database-name>
  $ psql -d <dev-database-name> -Ujmdictdb -f patches/nnn-xxxxxx.sql

Do any ad hoc testing needed to confirm the changes are as expected,
(eg generate the jmdict and jmnedict XML files, use the web interface
to edit some entries with the new/changed tags, etc.)

=== 7. Apply the database update to the test database:
  $ cd tests
  $ ./load-testdb.py data/jmtest01.sql
  $ psql -d jmtest01 -Ujmdictdb -f ../db/updates/nnn-xxxxxx.sql

Run the tests again:

  $ ./runtests

Errors here from test_kwds like indicate that the changes made by
database update are not consistent with the .csv files.  If there
were any errors, restore the original test database file:

  $ git checkout -- data/jmtest01.sql

Repeat the above steps until the update applies cleanly and all the
tests pass.  Then, save the updated jmtest01 database:

  $ pg_dump jmtest01 >python/tests/data/jmtest01.sql

=== 8. Commit the changes:
  $ git status

should list as modified any of the kw*.csv and ddtd-*.xml files
that were modified and the jmtest01.sql file.  It should also list
the new nnn-xxxxxx.sql file as "untracked".
Assuming there are no unexpected files listed:

  $ git add db/updates/nnn-xxxxxx.sql
  $ git add -u    # Adds the modified files
  $ git commit
  [enter the commit message in the editor]

=== 9. Update production code and database
After the I've pulled the changes I'll update the edrdg branch on
GitLab and the production database can be updated:

  $ cd <dev directory>
  $ git checkout edrdg
  $ git pull edrdg    # This gets the current version, including your
                      # changes from Gitlab
    # Update the production database
  $ psql -d jmdict -Ujmdictdb -f patches/nnn-xxxxxx.sql
  (as root) # make ... web
  $ git branch -d newtags   # You can delete your branch since your
                            # changes are now in the main edrdg branch.

[#appendix_a]
== Appendix A -- SQL to change or delete tags
In order to minimize the complexity of the SQL used to change or
delete tags, we use statements that are not "safe" in the presence
of other simultaneous transactions affecting the same entries or tags.
It is safest to run these  SQL statements in a quiescent database
without other concurrent activity.

In the SQL snippets callouts indicate lines containing parameters in
angle brackets that need to be replaced with actual values:

<1> <id> -- Id number of the tag to be updated or deleted.
<2> <new-tag-name> -- New name the tag is to be given.

=== DIAL tag
==== Change tag name
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ change of DIAL tag '''||kw
          ||''' to ''<new-tag-name>''.'                           --<2>
    FROM
       (SELECT DISTINCT entr, k.kw AS kw
        FROM dial t
        JOIN kwdial k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
UPDATE kwdial SET kw='<new-tag-name>' WHERE id=<id>;         --<2><1>
----
==== Delete tag
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ deletion of DIAL tag '''||kw
          ||''' from sens(s) #'||senss||'.'
    FROM
       (SELECT entr, k.kw AS kw,
            string_agg(sens::TEXT,',' ORDER BY sens) AS senss
        FROM dial t
        JOIN kwdial k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
DELETE FROM dial WHERE kw=<id>;                                 --<1>
DELETE FROM kwdial WHERE id=<id>;                               --<1>
----

=== FLD tag
==== Change tag name
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ change of FLD tag '''||kw
          ||''' to ''<new-tag-name>''.'                           --<2>
    FROM
       (SELECT DISTINCT entr, k.kw AS kw
        FROM fld t
        JOIN kwfld k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
UPDATE kwfld SET kw='<new-tag-name>' WHERE id=<id>;          --<2><1>
----
==== Delete tag
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ deletion of FLD tag '''||kw
          ||''' from sens(s) #'||senss||'.'
    FROM
       (SELECT entr, k.kw AS kw,
            string_agg(sens::TEXT,',' ORDER BY sens) AS senss
        FROM fld t
        JOIN kwfld k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
DELETE FROM fld WHERE id=<id>;                                  --<1>
DELETE FROM kwfld WHERE id=<id>;                                --<1>
----

=== FREQ tag
The FREQ tag values are referenced from the jmdictdb code
and in some SQL views in conjunction with determining the 'P'
(popular) attribute for an entry.  Changing or deleting
existing FREQ tags is more involved than the simple recipes
this section provide for.

=== GINF tag
==== Change tag name
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ change of GINF tag '''||kw
          ||''' to ''<new-tag-name>''.'                           --<2>
    FROM
       (SELECT DISTINCT entr, k.kw AS kw
        FROM gloss t
        JOIN kwginf k ON k.id=t.ginf
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
UPDATE kwginf SET kw='<new-tag-name>' WHERE id=<id>;          --<2><1>
----
==== Delete tag
GINF tags unlike most of the others are mutually exclusive:
only one GINF tag can apply to any gloss and every gloss must
have a tag.  Thus it is not possible provide a universally
applicable delete script because we can't in general know
if any existing target glosses should be deleted or assigned
some other (and which) GINF tag.

=== KINF tag
==== Change tag name
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ change of KINF tag '''||kw
          ||''' to ''<new-tag-name>''.'                           --<2>
    FROM
       (SELECT entr, k.kw AS kw
        FROM kinf t
        JOIN kwkinf k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
UPDATE kwkinf SET kw='<new-tag-name>' WHERE id=<id>;         --<2><1>
----

==== Delete tag
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ deletion of KINF tag '''||kw
          ||''' from kanj(s) #'||rdngs||'.'
    FROM
       (SELECT entr, k.kw AS kw,
            string_agg(kanj::TEXT,',' ORDER BY kanj) AS kanjs
        FROM kinf t
        JOIN kwkinf k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
DELETE FROM kinf WHERE id=<id>;                                 --<1>
DELETE FROM kwkinf WHERE id=<id>;                               --<1>
----

=== LANG tag
LANG tags are based on the
https://www.loc.gov/standards/iso639-2/php/code_list.php[ISO-639-2]
specification and other than additions they should require no changes.

=== MISC tag
==== Change tag name
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ change of MISC tag '''||kw
          ||''' to ''<new-tag-name>''.'                           --<2>
    FROM
       (SELECT DISTINCT entr, k.kw AS kw
        FROM misc t
        JOIN kwmisc k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
UPDATE kwmisc SET kw='<new-tag-name>' WHERE id=<id>;          --<2><1>
----
==== Delete tag
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ deletion of MISC tag '''||kw
          ||''' from sens(s) #'||senss||'.'
    FROM
       (SELECT entr, k.kw AS kw,
            string_agg(sens::TEXT,',' ORDER BY sens) AS senss
        FROM misc t
        JOIN kwmisc k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
DELETE FROM misc WHERE id=<id>;                                  --<1>
DELETE FROM kwmisc WHERE id=<id>;                                --<1>
----

=== POS tag
==== Change tag name
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ change of POS tag '''||kw
          ||''' to ''<new-tag-name>''.'                           --<2>
    FROM
       (SELECT DISTINCT entr, k.kw AS kw
        FROM pos t
        JOIN kwpos k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
UPDATE kwpos SET kw='<new-tag-name>' WHERE id=<id>;          --<2><1>
----
==== Delete tag
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ deletion POS tag '''||kw
          ||''' from sens(s) #'||senss||'.'
    FROM
       (SELECT entr, k.kw AS kw,
            string_agg(sens::TEXT,',' ORDER BY sens) AS senss
        FROM pos t
        JOIN kwpos k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
DELETE FROM pos WHERE id=<id>;                                  --<1>
DELETE FROM kwpos WHERE id=<id>;                                --<1>
----

=== RINF tag
==== Change tag name
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ change of RINF tag '''||kw
          ||''' to ''<new-tag-name>''.'                           --<2>
    FROM
       (SELECT entr, k.kw AS kw
        FROM rinf t
        JOIN kwrinf k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
UPDATE kwrinf SET kw='<new-tag-name>' WHERE id=<id>;         --<2><1>
----
==== Delete tag
[source,sql]
----
INSERT INTO hist(entr,hist,stat,unap,name,notes)
   (SELECT h.entr,hist,stat,unap,'dbmaint',
       'In situ deletion of RINF tag '''||kw
          ||''' from rdng(s) #'||rdngs||'.'
    FROM
       (SELECT entr, k.kw AS kw,
            string_agg(rdng::TEXT,',' ORDER BY rdng) AS rdngs
        FROM rinf t
        JOIN kwrinf k ON k.id=t.kw
        WHERE k.id=<id> GROUP BY entr,k.kw) AS a                --<1>
    JOIN
       (SELECT entr,1+MAX(COALESCE(hist,0)) AS hist
        FROM hist GROUP BY entr) AS h ON h.entr=a.entr
    JOIN entr e ON e.id=h.entr);
DELETE FROM rinf WHERE id=<id>;                                 --<1>
DELETE FROM kwrinf WHERE id=<id>;                               --<1>
----
=== SRCT tag
SRCT tags identify the particular corpus an entry belongs to
("jmdict", "jmnedict", etc.)
They are referenced extensively throughout the JMdictDB code base
and code changes are required in addtition to database changes to
modify them.

=== STAT tag
STAT tags describe the "status" of an entry (active, rejected,
deleted).
They are referenced extensively throughout the JMdictDB code base
and code changes are required in addtition to database changes to
modify them.

=== XREF tag
XREF tags are used to classify particular types of cross-references.
Two ("see" and "ant") are used in the "jmdict" and "jmnedict"
corpora although others are defined in kwxref.csv.
They are referenced extensively throughout the JMdictDB code base
and code changes are required in addtition to database changes to
modify them.
