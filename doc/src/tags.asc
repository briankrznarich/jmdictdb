:icons: font
== Procedure to add or modify JMdictDB tags

This document describes two alternative ways to change the tags
recognized by the JMdictDB system:

- Local changes made at a particular site.
- Changes made to the JMdictDB software for distribution to all users.

== 1. Local changes to the tags

During normal operation of the JMdictDB system the tags known to
the system (accepted when submitting edits, used in XML output, etc)
are stored in a set of database tables with names prefixed with
"kw" and collectively referred to as the "kw*" tables or "tag tables".
These tables are loaded when the JMdictDB system is installed and
updated from time to time via the normal JMdictDB upgrade process.

A site can make localized custom changes to these tags by changing
the data in the tables.  Changes can be made by direct SQL manipulation
of the kw* tables' contents, or with the help of a tool that will
generate the necessary SQL statements from a CSV listing of the
changes to be made.

=== 1.1. Contents of the kw* tables
There are six database tables that contain editable tag information.
|===
|**Table**|**XML element**|**Applies to**|**Use**
| kwdial  | <dial>        | sense        | dialect
| kwfld   | <field>       | sense        | field of application
| kwkinf  | <ke_inf>      | kanji        | kanji information
| kwmisc  | <misc> (<name_type> in JMnedict) | sense | miscellaneous information
| kwpos   | <pos>         | sense        | part of speech
| kwrinf  | <re_inf>      | reading      | reading information
|===
Please see the comments in the XML DTD for the XML element shown for
more details on the purpose and use of each tag.

There are a number of other kw* tables that contain tag or similar
information but these may require coordinated code changes when their
their contents are changed:
kwcinf, kwfreq, kwginf, kwgrp, kwlang, kwsrc, kwsrct, kwstat, kwxref.
Changing the contents of these tables is not covered in this document.

Each kw* table has four fields:

- id -- A numeric id number.  Must be unique for each row in the table.
    When choosing id numbers for new tags you should start with some
    large value, say 500, to avoid conflicts with new tags introduced
    in JMdictDB software upgrades.
- kw -- The tag name; a short abbreviation, must also be unique for
    for each row in the table.  If the tag will occur as an entity
    in an XML DTD, this will also be the **entity name** unless
    overridden in the "ents" field.
- descr -- A longer (but one line) description of the tag.  If the tag
    will occur as an entity in an XML DTD, this will also be the
    **entity value** unless overridden in the "ents" field.
- ents -- A JSON string that controls how and in which XML files the
    tag will appear as an entity.  This contents of this field are
    described in <<appendix_b,Appendix B>>.

=== 1.2. Making the changes
CAUTION: Always test your changes on a **copy** of your production
database before applying them to the production database.  You'll want
to verify that you can edit and enter new entries that use the tag.
And you'll want to confirm that XML (including the DTD entity list)
is properly generated.

CAUTION: Always make a backup of your production database before
applying your changes to it.

To make a copy of your production database see section 2.1 of
the link:https://www.edrdg.org/~smg/doc/dev.html#_2_1_make_a_copy_of_the_current_jmdict_database[Dev Guide].

<<appendix_a,Appendix A>> describes the SQL statements needed to make
various kinds of changes to the tags.  Use that as a guide to write
the SQL statements you need to make the changes you want.

It is recommended that you put the statements you will use into a file
which you can then run against any database.  The file should start
with the two lines:

  \set ON_ERROR_STOP
  BEGIN;

and end with:

  COMMIT;

Your SQL statements go between those.  You can then apply
the changes to a database with:

  $ psql -d my_test_database -f my_script_file.sql

where "my_test_database" is the database to apply them to, and
"my_script_file.sql" is the file you created with the SQL statements
to effect the change.

If there is a problem with any of the statements, the script file
will abort without applying any of the changes; you can correct
it and run it again.

=== 1.3. Conflicts
The JMdictDB project tracks the tags used in the JMdict and JMnedict
XML files distributed by edrdg.org and updates the JMdictDB software
to match when they change.  Consequently it is possible that a
JMdictDB database update could fail to apply successfully because
a tag id number or name conflicts with a locally added tag.

In this case you will need to change the locally modified tag to
avoid the conflict.  The process for changing tag names has already
been described.  A conflict between id numbers is unlikely if
you followed the advice in <<appendix_a,Appendix A>> to start
local id numbers at some high value like 500.

However if an id number conflict does occur, you can change the
local id number using a SQL statement like:

  UPDATE <table> SET id=<new-id-number> WHERE id=<old-id-number>;

The change will be propagated down to the entries that use the
tag so that any that used the old tag number will now use the new
one; i.e. they will appear unchanged and continue to have the
tag applied.

== 2. JMdictDB tag changes for distribution
This section describes the procedure for implementing a "global"
change to the JMdictDB tags -- that is, a change that will be
incorporated in the JMdictDB software and distributed to all
JMdictDB users (both of them. :-)  This is in contrast to a
local tag change that can be made in the database tables at a
particular site and that affects only that site.

There are two places that need changes:

  * the kw*.csv file(s) that define the tags values (section <<sec2_3>>),
  * a SQL database update script to propagate the changes to any
    existent databases (section <<sec2_4>>).

We assume you've set up a development environment per
link:dev.html[Development Environment].

=== List of steps (details below)
  1. <<sec2_1,Create a new Git branch>>
  2. <<sec2_2,Run the tests>>
  3. <<sec2_3,Update the necessary kw*.csv file(s) in jmdictdb/data/>>
  4. <<sec2_4,Write an update script in db/updates/>>
  5. <<sec2_5,Update the database version id in db/mktables.sql>>
  6. <<sec2_6,Test the database update script>>
  7. <<sec2_7,Update and save the test database>>
  8. <<sec2_8,Commit the changes>>
  9. <<sec2_9,Update the production database and code>>

[#sec2_1]
=== 2.1. Create a git branch for the tag changes work
     $ cd <your development directory>
     $ git status

Git should say "working directory clean" or list only "untracked
files".

   $ git checkout master
   $ git checkout -b newtags

You can replace "newtags" with any branch name you want.
[#sec2_2]
=== 2.2. Run the tests.

   $ cd tests
   $ ./runtests.py

If there are errors they should be fixed before continuing.
This will prevent confusing preexisting errors with errors
resulting from your tag changes.
[#sec2_3]
=== 2.3. Edit the appropriate csv file(s)
The kw*.csv files in jmdictdb/data/ are the canonical source
of static tag information in JMdictDB.

If you are adding a new tag, add a line defining the new tag to
the appropriate .csv file in jmdictdb/data/.  Each line consists
of either three or four tab-separated fields:

  id -- The next sequential number.
  kw -- A short abbreviation for the tag.
  descr -- A longer (but one line) description of the tag.  If the
    text contains any double-quote characters (") the entire descr
    text should be enclosed in double-quotes and each embedded
    double-quote should be doubled (ie, each " changed to "").
  ents -- Modififcations to the tag for use in an XML file.
    This field is present only in the files kwdial.csv, kwfld.csv,
    kwkinf.csv, kwmisc.csv kwpos.csv and kwrinf.csv.

If you are changing an existing tag, edit the appropriate
line.  Caution: in general the "descr" can be changed arbitrarily
but you should be cautious about changing the "kw" field
value as it may be referenced in the code and need corresponding
changes there are well.  A grep through all the .py
files for the text "XXX['kkk']" or "XXX_kkk" (where XXX is the
tag type, eg FREQ, POS, etc, and kw is the short abbreviation of
the tag (the value you want to change) may (but is not guaranteed to)
turn up such cases.

In particular the following tags are known to be referenced in the
jmdictdb code:

  FREQ (all), GINF ('eql','lit'), LANG ('eng'), MISC ('male','fem'),
  STAT (all), SRCT (all), XREF('see','ant')

There may be others.

For more details on the "ents" value, see <<apendix_b,Appendix B>>.

Be careful that your editor is set to preserve tabs (including
trailing ones) when saving rather than replacing them with spaces.

[#sec2_4]
=== 2.4. Write an update script to update existent databases
The csv files contain the canonical tag definitions and are
loaded into a jmdictdb database when it is first created but changes
made to the csv files afterwards are not automatically propagated
to existing databases -- that is done by the script you write here.

Generally, adding a new tag or changing a tag's description text
or entities (ents) value is simple.
Changing a tag's name (aka keyword) or deleting a tag is
more complicated because a history record needs to be created for
any entries that use the tag.  Were that not done, someone looking
at an entry's history in the future could be confused by the absence
of a tag that was shown as added in the past, or presence of a tag
with no earlier history showing its addition.
The cause may be obvious in the case of a single tag change but with
multiple changes over time it could be impossible to determine the
entry's history accurately.
Even if it is known that a particular database doesn't have any
entries using the tag, the update script has to be usable on *any*
database.

After the database has been updated the tag changes will automatically
appear in the Search and Help pages.

This procedure applies only to the change of tag changes that don't
require any change to the database schema or jmdictdb code.  If that
is not true, additional steps are required that are beyond the scope
of these instructions.
[#sec2_4_1]
==== 2.4.1 Procedure
Create a new database update file in db/updates/ named:

  nnn-xxxxxx.sql

where nnn is a sequential 3-digit decimal number (use the next highest
number from the update files already in db/updates/) and "xxxxxx" is
a random 6-digit hexadecimal number.  On way of generating it is to
use the command:

  python -c 'import random;print("%06.6x"%random.randint(0,16777215))'

Use this template for the contents of the new update file:

[source,sql]
----
\set ON_ERROR_STOP
BEGIN;

-- Comment summarizing the update
-- Additional comments providing more detail if needed.
-- [...]

\set dbversion  '''xxxxxx'''  -- Update version applied by this update.
INSERT INTO db(id) VALUES(x:dbversion::INT);

-- Do the update...

[SQL statements to implement the update, as described in
Appendix A, go here.]

COMMIT;
----
Replace "xxxxxx" in the template with same "xxxxxx" you generated
above for the filename.  Replace the "[sql statements...]" lines
with the SQL statements needed to implement the changes.  See the
following sections for more details on that.

Note that the tag changes are done inside a transaction: if there
is an error when you run the script the database is left unchanged
so you can simply correct the error and rerun -- no need to undo
a partially applied update.
[#sec2_5]
=== 2.5. Update the db/mktables.sql version number
Find the line near the top of db/mktables.sql that looks like:

  \set updateids '''zzzzzz'''

where "zzzzzz" is a 6-digit hexadecimal string, or possibly several
such strings separated by commas, and update it to the same "xxxxxx"
hex number used in section <<sec2_4_1>> above.

[#sec2_6]
=== 2.6. Test the database update script

You'll waant to test the database update script on both the
test database (confirming all the tests still pass) and on
copy of the production database.

==== 2.6.1. Test with the test database
First, load a fresh, clean copy of the test database:

  $ cd tests
  $ git status
  [confirm that file data/jmtest01.sql has not been modified]
  $ ./load-testdb.sh data/jmtest01.sql

Apply the database update to it:

  $ psql -d jmtest01 -Ujmdictdb -f ../db/updates/nnn-xxxxxx.sql

Run the tests again:

  $ ./runtests

Errors here from test_kwds like indicate that the changes made by
database update are not consistent with the .csv files.  If there
were any errors, restore the original test database file:

  $ git checkout -- data/jmtest01.sql

Repeat the above steps until the update applies cleanly and all the
tests pass.

==== 2.6.2 Test on a production database copy

Make a copy of the production database and test the database
update script on it.  To make a copy of your production database
see section 2.1 of the
link:https://www.edrdg.org/~smg/doc/dev.html#_2_1_make_a_copy_of_the_current_jmdict_database[Dev Guide].

Apply the update script:

  $ psql -d <db-copy-name> -U jmdictdb -f db/updates/nnn-xxxxxx.sql

You can now access the database with the web UI, generate XML
files, etc, to confirm the changes are as intended.

[#sec2_7]
=== 2.7. Update and save the test database
Since it is possible running the tests made changes to the test
database which we don't want preserve in the repository, reload
it again and reapply the database update again:

  $ cd tests
  $ git status
  [confirm that file data/jmtest01.sql has not been modified]
  $ ./load-testdb.sh data/jmtest01.sql
  $ psql -d jmtest01 -Ujmdictdb -f ../db/updates/nnn-xxxxxx.sql

And save it to the load file:

  $ pg_dump jmtest01 >data/jmtest01.sql

[#sec2_8]
=== 2.8. Commit the changes
  $ git status

should list as modified any of the kw*.csv files
that were modified and the jmtest01.sql file.  It should also list
the new nnn-xxxxxx.sql file as "untracked".
Assuming there are no unexpected files listed:

  $ git add db/updates/nnn-xxxxxx.sql
  $ git add -u    # Adds the modified files
  $ git commit
  [enter the commit message in the editor]

At this point you may want to send a pull request to the JMdictDB maintainer or, if you are the maintainer, merge the development
branch into the master branch.
[#sec2_9]
=== 2.9. Update production code and database
After the I've pulled the changes I'll update the edrdg branch on
GitLab and the production database can be updated:

  $ cd <dev directory>
  $ git checkout edrdg
  $ git pull edrdg    # This gets the current version, including your
                      # changes from Gitlab
    # Update the production database
  $ psql -d jmdict -Ujmdictdb -f patches/nnn-xxxxxx.sql
  (as root) # make ... web
  $ git branch -d newtags   # You can delete your branch since your
                            # changes are now in the main edrdg branch.

[#appendix_a]
== Appendix A -- SQL to add, change or delete tags

This section provides SQL statements that can be composed in a
script file to implement tag changes locally, or in a database
update script when implementing the changes as part of a JMdictDB
software update.

Note that in SQL statements, case is not significant; upper-case
is used here just as a matter of convention.

To view the current contents of any tag table, run:

  psql <database-name>

and then enter (replacing "<table>" with the actual kw* table
name):

  SELECT * FROM <table> ORDER BY id;

In the SQL statements below callouts indicate lines containing
parameters in angle brackets that need to be replaced with actual
values:

<1> <table> -- Name of the kw table to alter, e.g. "kwdial".
<2> <lnktable> -- Name of the table that applies tags to entries.
  This is the same as <kwtable> but without the "kw" prefix.  For
  example, if <table> is "kwdial", then <lnktable> will be "dial".
<3> <id> -- Id number of the tag to be altered.  For a new tag in
  the JMdictDB software this will generally be the next highest
  unused number.  For local changes, starting at larger number,
  for example 500, is advised to avoid conflicts with new tags
  introduced in the JMdictDB software from time to time.
  Use "SELECT * FROM <table>;" to see all the current values.
<4> <tag-name> -- New name the tag is to be given.  Unless overridden
  in the <ents> field, this will also be used as the entity **name**
  in the JMdict XML DTD.
<5> <description> -- Description for the tag.  Unless overridden in
  the <ents> field, this will also be used as the entity **value**
  in the JMdict XML DTD.
<6> <ents> -- A JSON string that controls how and in which XML files
  the tag will appear.  See <<appendix_b,Appendix B>> for more information.

fields, use the word NULL without any surrounding quotes.

Regarding the "ents" field, the short version is: if "ents" is empty
(NULL) the tag will appear as an entity in the JMdict XML but not in
the JMnedict XML.  If you want something different then it's time to
read <<appendix_b,Appendix B>>.

If there are any single quote characters (') in any of the fields,
they should be doubled.  For example, to set the "descr" field of a
tag to "'taru' adjective", use:

  UPDATE kwpos SET descr='''taru'' adjective' ...

The outer single-quotes are required SQL syntax, the single quotes
around "taru" were doubled.

=== To add a new tag:

  INSERT INTO <table> VALUES(<id>,'<tag-name>','<descr>','<ents>');   --<1><3><4><5><6>

=== To delete an existing tag:

Note that the statement to delete the tag will fail if there are any
entries that use the tag, including Rejected or Deleted entries.
If that is the case, run this first:

  DELETE FROM <lnktable> WHERE kw=<id>;                               --<2><3>

Then delete the tag:

  DELETE FROM <table> WHERE id=<id>;                                  --<1><3>

=== To change the name, descr or ents value of an existing tag:

  UPDATE <table> SET kw='<tag-name>' WHERE id=<id>;                  --<1><4><3>
  UPDATE <table> SET descr='<description>' WHERE id=<id>;            --<1><5><3>
  UPDATE <table> SET ents='<ents>' WHERE id=<id>;                    --<1><6><3>

If you are changing more than one field you can combine them in
a single statement, for example:

  UPDATE <table> SET kw='<tag-name>',descr='<description>' WHERE id=<id>;  --<1><4><5><3>

[#appendix_b]
== Appendix B -- The "ents" field

The "ents" column of the kw* tables and CSV files that have one
(kwdial, kwfld, kwkinf, kwmisc, kwpos, krinf) contains information
about how and in which XML files the tag will appear as an XML
entity item.

The contents of this field are either NULL or a JSON string.

If the "ents" value is empty (NULL), then the tag will will be
represented as an entity in JMdict XML with an entity name that
is the same as the tag's "kw" value and an entity value that is
the same as the tag's "descr" value.  For JMnedict XML, the tag
will be neither recognized when parsing XML nor output when
generating XML.

If the "ents" value is not empty, then it must be a JSON string
representing an object.  The object must contain items with the
keys "jmdict", "jmnedict" or both.  The "jmdict" item applies when
processing JMdict XML and if absent the effect is the same as
if the "ents" value was empty (the tag will be treated as an entity
in the XML).  The "jmnedict" item works similarly for JMnedict XML
(if absent the tag will *not* be treated as an entity in the XML.)

The value of each item should be 0, 1 or another object.  If 0,
the tag is neither recognized nor produced in the XML.  If 1,
the tag is recognized and produced as an entity in the XML.
Note that because tags are produced by default for JMdict and
not for JMnedict, an "ents" value of {"jmdict":1} is effectively
a no-op, as is {"jmnedict":0}.

If the value is another object, it must have the keys "e", "v" or
both.  If there is an "e" key, that item's value will be used for
the entity name in the XML rather than the tag's "kw" value.  If
there is  a "v" value, it will be used for the entity's value in
the XML rather than the tag's "descr" value.

Some examples from the kwmisc table:

   id | kw  |     descr     | ents
  ----+-----+---------------+------
    5 | col | colloquialism |

This has no "ents" value and thus the entity ```&col;``` will be
recognized and produced in the JMdict XML but not in the
JMnedict XML.

   id  |   kw    |       descr       |      ents
  -----+---------+-------------------+-----------------
   181 | surname | family or surname | {"jmnedict": 1}

The ```&surname;``` entity will be recognized and produced in
the JMnedict XML.  It will also be recognized and produced
in the JMdict XML by default since it is not specifically
excluded with "jmdict":0.
....
 id |  kw  |            descr               ents
----+------+------------------------------+----
 15 | male | male term, language, or name |
   {"jmdict": {"v": "male term or language"},
    "jmnedict": {"e": "masc", "v": "male given name or forename"}}

  [Note: above is line-wrapped for this document; would be a
   single line in the kwmisc.csv file.]
....
In this case the tag description ```male term, language, or name```
is used with within JMdictDB but in the JMdict XML, the value
of the ```&amp;male;``` entity will be ```male term or language```.
In the JMnedict XML the entity name will be ```&masc;``` and its
value will be ```male given name or forename.```
