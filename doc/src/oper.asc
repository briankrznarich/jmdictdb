:sectnums:
:xrefstyle: short
:section-refsig:
= Operation and Debugging Guide
:toc:

Operation and Debugging Guide

This document collects some notes on the care and feeding
of a JMdictDB instance and on tools and techniques useful
for troubleshooting and debugging.

//FIXME? add note about need to reinstall jmdictdb package
// after Python upgrade (just like other packages)?
== Document conventions and placeholders
In the sections that follow the following placeholders should
be replaced with actual values:

  {{DEVDIR}}:: The local development directory where the JMdictDB
    code has been checked out to from Git.
    Example value: ~/devel/jmdictdb/
  {{URLROOT}}:: URL root that the Apache (or other WSGI-capable)
    web server is configured to serve the JMdictDB pages under.
    Example value: /jmdictdb (the web server will serve the JMdictDB
     pages under the URLs \https://localhost/jmdictdb/, e.g.,
     \https://localhost/jmdictdb/srchform.py)
  {{WEBROOT}}:: The location the web component files are installed
    at and where the web server is configured to look for them at.
    Example value: /usr/local/jmdictdb/.
    The default value is /var/www/jmdictdb/.

Example URLs show both "http:" and "https:" URL schemes; accessing
the development Flask server will generally be via "http:" but
the choice of "http:" or "https:" for the production web server
will depend on the site configuration.

[#users]
== User management
When JMdictDB is accessed by the web pages, there are three
levels of user privilege:

* Anonymous -- Any user has general read access to the JMdictDB
  web pages (e.g., search for entries) and can submit new or
  edited entries as unapproved submissions without any need to
  login.
* Editor -- To approve entries a user must log in as an Editor.
* Admin  -- A user logged in as Admin has, in addition to
  Editor privileges, the ability to manage other users (add,
  remove, modify, etc.)

There are two way to manage users:

* The users.py web page.  This is accessible by logging in
and then clicking your name (which is a link) beside the
Logout" button.  This will take you to a page that lets you
change the settings for your own account.  If you have Admin
privilege, there will also be two links: "Add User" and
"List Users" that will allow to to perform user admin actions
on other users.

* The bin/users.py command line program.  To use this you
must have access to a Postgresql database account with
access to the JMdictDB database.  Run `bin/users.py --help`
for details on use.  The installation procedure uses this
script to add an initial Amin user.

== Temporary downtime
Web access to the JMdictDB pages may be temporarily disabled
for maintenance, because of excessive load, or to block
access from a set of specific IP addresses.  When this is
done visitors (or specific visitors in the case of an IP
block) to any JMdictDB pages will see a message to that
effect.

This is done by creating a control file in a directory
designated as the status directory.  The location of the
status directory is set in the configuration file by the
STATUS_DIR setting.  By default it is the
{{WEBROOT}}/{{CGI}} directory.
//FIXME: {{CGI}} not mentioned in placeholders section.

The control files are named "status_maint", "status_load" or
"status_blocked".  If either of the first two exist (contents
are ignored), any web access to a CGI script will result in a
redirect to the pages "status_maint.html" or "status_load.html"
which present the user with a message that the system is
unavailable due to maintenance or excessive load, respectively.

If the "status_blocked" control file exists, it should contain
IP addresses, one per line.  When a visitor's IP matches one of
the entries, a redirect to the page "status_blocked.html" will
be returned.  Lines that do not have the format of an IP
address are ignored (as is any text after the first word on a
line) and may be used for comments.

The names of the control files and the location of the html
files are not customizable although you can modify the contents
of the html files.

It is up to you to create and and remove the control files
as appropriate.

== Upgrading JMdictDB
Development of JMdictDB is ongoing and updates to the code are
made frequently and to the database schema, occasionally.
Updates to both the code and the database are generally
not cummulative; all updates between the current state
and the latest state need to be applied.

//FIXME? mention the "master" and "edrdg" branches with a
// reference to their description in the Inmstall doc?
In general the upgrade procedure is to pull the latest changes
from the GitLab repository, install them with the 'make' command,
then apply any required database updates.  In some case additional
or alternate steps will be required which will be detailed in the
update instructions.

The usual steps are detailed below.  We assume you have a cloned
copy of the JMdictDB repository in {{DEVDIR}}; if not you can get
a copy with:

  $ git clone https://gitlab.com/yamagoya/jmdictdb.git {{DEVDIR}}

NOTE: If both a software and database upgrade are required, the
JMdictDB web service may not be available (users will get a
"database version error" page) from the time the software is
updated until the database update completes successfully.

[#code-upgrade]
=== Code upgrades
To upgrade the code:

  $ cd {{devdir}}
  $ git status

Verify you have the desired branch ("master" or "edrdg") checked
out, although for most announced upgrades, they will be the same.

  $ git show -s --oneline

Note the 7-digit hex revision number in case there are problems
with the update and you want to revert to the former (at this
point in time, the still current) version.

  $ git checkout master   # or edrdg.
  $ git pull
  $ sudo make WEBROOT={{WEBROOT}} install-sys

=== Database upgrades
Many upgrades will involve updating only the JMdictDB software as
described above, but sometimes upgrading the database schema is
necessary to support new features.

Upgrading the database is done by executing one or more SQL
script files with the Postgresql tool, `psql`, or a script
that runs psql such as db/updates/update.sh.  In addition to
the actual schema changes made by the script, it also stores
a database version (aka update) number, usually shown as a
6-digit hexadecimal number, in the database.
footnote:[The database version number is stored as an
integer in table "db" but generally accessed as a hexadecimal
string via the view "dbx".]

When the JMdictDB software opens a connection to a JMdictDB
database, it checks the database version number and will exit
if the number does not match the number it expects (which is
stored in the file jmdictdb/dbver.py).  This is to reduce the
chances of the code trying to access a database schema it
does not fully understand.

==== Backup the current jmdict database

  $ pg_dump -Fc jmdict <FILENAME>

where <FILENAME> is the name to use for the backup file.  It can be
named and located whatever and anywhere you want.

==== Determine the correct database updates to apply

NOTE: **This is usually not necessary since the update documentation
will provide this information.**

The full set of historical database updates are maintained in the
db/updates/ directory.  Generally the update documentation will
indicate which of the update files there need to be applied.
If not, run the following command to show the current database
version and whether or nor it is compatible with the current
JMdictDB code.

  $ tools/dbversion.py jmdict

If the api and database version are compatible, you're all set.
If it will report something like:

  code expects updates: d30cfd
  jmdict: incompatible, missing updates: d30cfd, has updates: e4aa1c

Then, look in db/updates/ for a series of updates that will bring
the database from, in this example, e4aa1c to d30cfd.  At the time
of writing, there are two that follow 036-e4aa1c.sql:

  036-e4aa1c.sql  037-46354d.sql  038-d30cfd.sql

Some updates may have an "s" following the initial three-digit
sequence number; ignore these, they are updates for the "jmsess"
database.

==== Apply the database updates
:fn-update-sh: footnote:[The update.sh script simply runs the command `psql -Ujmdictdb -d<first-arg> -f<next-arg>`, for each of the second and subsequent arguments (denoted <next-arg>).]

Run the db/updates/update.sh script to apply all the required
updates.  Assuming the the updates:

  037-46354d.sql
  038-d30cfd.sql

are required, as determined from the update documentation
or by means of the dbversion.py tool described above, they
are conveniently applied by the update.sh script{fn-update-sh}:

  cd db/updates/
  ./update.sh jmdict 037-46354d.sql 038-d30cfd.sql

The first argument is the database to update; the remaining
arguments are the update files to apply.

=== If something goes wrong
If no database update was involved, a software update can
be reversed by checking out the Git revision that was in'
use prior to the upgrade and reinstalling it with the
'sudo make ... install-sys' command used in section
<<code-upgrade>>.  If you don't have the previous Git
revision number it will, under usual circumstances, be
the one tagged "edrdg" in the Git repository.

The Makefile does not use the traditional 'file modification
time' to decide whether to reinstall the target files; rather
it runs an install script that will reinstall a target file
if it is different (determined by checksum) than the source
file.  Thus the earlier versions of the source files should
get properly reinstalled to their destination locations.

If the upgrade involved a database update, reversing it is
more complex.  If you have a backup if the database from
before the upgrade and no activity (new submissions, etc.)
have occurred since the upgrade, restoring from the backup
is probably the best option.  If that can't be done then
you will need to examine the database update file(s) and
manually undo the changes they made, including removing
the new database version number and activating (setting
the "active" column value to True) for the previous database
version number).

[#tests]
== Tests
See tests/README.txt for more information on running the tests.

== General troubleshooting
=== shentr.py
Entries in the database can be examined directly, with
no involvement from the web server, by the command line
program, `bin/shentrpy`.  Run the program with the
`--help` option for full details.

=== cgiinfo.py web page
If the JMdictDB web server is more-or-less operational, the
cgiinfo.py web page can provide useful information on the
server environment.  Of particular interest is often the
"pkg location" and "pkg_version" in the Execution Info section;
the server code using the wrong or outdated version of the
software is a common cause of unexpected behavior.

The cgiinfo.py page can also show if the correct .ini files
are being used, the location of the log file and the available
database service names.

=== Log files
There are several sources that may provide diagnostic
information in the case of problems:

* web server log files (OS dependent location)
* postgresql log files (OS dependent location)
* JMdictDB log files (typically in {{WEBROOT}}/lib/jmdictdb.log
  but location is defined in the config file and is shown
  in the cgiinfo.py web page.)

Note that the JMdictDB log file must be pre-created; the
JMdictDB code will not create it automatically  (see
the xref:install.asc).  If it
is not not accessible or writable by the web server at
web server startup, an error message to that effect will
be written to the web server's error log.

Also note that it is not truncated or rotated periodically;
you must arrange for that.

//FIXME: document what info goes into which files.


== WSGI debugging

The primary debugging tool is the local web server built into
the Flask web framework.  It can be started with:

  tools/run-jmapp.py {{CONFIG-FILE}}

where {{CONFIG-FILE}} is the configuration file to use.  The
usual config file will have log messages directed to a file
and certain log levels suppressed or promoted.  When running
under the Flask server for debugging purposes it is often
better to run with a config file that directs log messages
to stderr so you can see them in the terminal window that is
running the Flask server.

Make a copy of the {{DEVDIR}}/web/lib/jmdictdb.ini file to,
say, debug.ini. Edit it and comment out the "LOGFILE = ..."
which will cause messages to go to stderr instead. You also
probably want to see at least all "INFO" level mesasges so
"LOGFILTER" should have at least the line `I^.*` in it.
You can then, from {{DEVDIR}}, run:

  $ tools/run-jmapp.py web/lib/debug.ini

and browse to http://localhost:5000/ to get the search page.

The Flask server will run the code in {{DEVDIR}}, not the
installed code, so you can modify the code and view the
effects, insert pdb breakpoints for debugging etc.

For full details see the Flask documentation at
https://flask.palletsprojects.com/en/2.0.x/server/

CAUTION: The flask server will by default access the same
"jmdict" database as the installed production server and
changes made to entries will affect the same entries used
to produce the JMdict and JMnedict XML files.   To access
a different "throw-away" database, see section
**9. Creating a database for development**
and use a "svc" URL parameter (e.g.,
".../srchform.py?svc=jmtest" to direct the web  server to it.

//FIXME: add section on configuring Apache/mod_wsgi to
// serve directly from the dev directory.

== CGI debugging
The CGI code is deprecated since the adoption of the
more efficient and clean Flask/WSGI code so this section
of mainly of historical interest.

The CGI scripts can be run directly in a terminal window
by giving them a URL (which can be copy-pasted from a web
browser) command line argument:

  $ cd web/cgi/
  $ python3 -mpdb entr.py http://localhost/jmdictdbv/cgi/entr.py?svc=jmdict&e=2171804

In the above example, the "-mpdb" runs the Python debugger
which is usually useful but is optional.

Pages that normally get their parameters by a POST request
and thus do not show the parameters in the URL can be coerced
to do so by adding the URL parameter, "dbg=1".
To debug the edconf.py (confirmation) page for example, go to
the preceding edform.py (edit form) page and add the dbg parameter:

  http://localhost/jmdictdbv/cgi/edform.py?e=14082&dbg=1

Click the Next button and the Edit Confirmation page will
be displayed with URL parameters:

  http://localhost/jmdictdbv/cgi/edconf.py?kanj=%E5%93%80%E6%AD%8C&rdng=%E3%81%82%E3%81%84%E3%81%8B&sens=%5B1%5D%5Bn%2Cadj-no%5D%0D%0A++lament+%28song%29%3B+elegy%3B+dirge%3B+sad+song%0D%0A%5B2%5D%5Bn%2Cadj-no%5D%0D%0A++Lamentations+%28book+of+the+Bible%29&reference=&comment=&name=&email=&svc=jmdict&id=14082&stat=2&dbg=1&src=1&seq=1150170&srcnote=&notes=

You can now copy-paste that into the command line and
debug the edconf.py script interactively.

  $ python3 -mpdb edvconf.py 'http://localhost/jmdictdbv/cgi/edconf.py?kanj=%E5%93%80%E6%AD%8C&rdng=%E3%81%82%E3%81%84%E3%81%8B&sens=%5B1%5D%5Bn%2Cadj-no%5D%0D%0A++lament+%28song%29%3B+elegy%3B+dirge%3B+sad+song%0D%0A%5B2%5D%5Bn%2Cadj-no%5D%0D%0A++Lamentations+%28book+of+the+Bible%29&reference=&comment=&name=&email=&svc=jmdict&id=14082&stat=2&dbg=1&src=1&seq=1150170&srcnote=&notes='

The "dbg" parameter, once added, is passed along to all
subsequent pages.

[#devdb]
== Creating a database for development
When doing development work it is convenient to have a
dedicated, throw-away test database to avoid polluting
the production database -- even using the "test" corpus
in the production database unnecessarily bumps up the
shared entry id numbers and produces noise messages in
the log files.

In the examples below the test database is named "jmtest"
but you can name it whatever you wish.  Keep in mind
the names "jmdict", "jmnew" and "jmtest01" are currently
used by default for other purposes.

To create a copy of the current "jmdict" production database:

  $ createdb jmtest
  $ pg_dump jmdict | psql -d jmtest

Alternatively you can follow the procedure in the
xref:install.asc#load-db[Section 4.3] of the Installation
Guide for creating a new database but after loading it
from the XML files instead of running
"make -f Makefile-db activate", rename the "jmew" database
to "jmtest" in 'psql':

  $ psql -Upostgres
  psql> alter database jmnew rename to jmtest;

To make the database available through the web pages,
add a new section to the jmdictdb-pvt.ini file.

  [db_jmtest]
  dbname = jmtest
  sel_user = jmdictdbv
  sel_pw = xxxxxx
  user = jmdictdb
  pw = xxxxxx
  session_db = db_session

It you intend to access the database though the Flask
development server, add it to the file
{{DEVDIR}}/web/lib/jmdictdb-pvt.ini (change the base
filename if you are using something different.)

If you intend to access the database though the production
(e.g. Apache) web server, add it to the file
{{WEBROOT}}/lib/jmdictdb-pvt.ini (again, adjust for
site-specific changes.)

Replace the "xxxxxx" strings with the passwords for the
"jmdictdbv" and "jmdictdb" Postgresql users respectively.

The test database will the be accessible at the usual
URL(s) with the addition/replacement of the "svc" URL
parameter

  http://localhost/jmdictdb/srchform.py?svc=jmtest

or for the Flask server:

  http://localhost:5000/srchform.py?svc=jmtest

== Preparing a "release"
The JMdictDB project does not produce formal releases per se;
instead, after a number of new features and bug fixes have
accumulated and after consultation with Jim Breen at edrdg.org
(the primary user of JMdictDB), the changes made to branch
"master" are merged into branch "edrdg" and both branches are
pushed to GitLab.  After the edrdg.org site applies the updates
from the "edrdg" branch, it is tagged with "edrdg-<YYMMDD>"
("<YYMMDD>" is the year, month and day) to provide a record
of what software was running there when.

Before pushing to GitLab, the following should be checked:

1. Make sure the JEL parser is up-to-date with the parser
  source file, jmdictdb/jelparse.y:

  $ cd {{DEVDIR}}/jmdictdb/ && make

2. Confirm all the tests pass (see section <<tests>>)

3. If possible, do a full install from XML files per the
  xref:install.asc[Installation Guide]

4. Make sure the documentation is up-to-date:

  $ cd {{DEVDIR}}/doc/ && make

5. and optionally install a local copy to ~/public_html/doc/

  $ make install

6. Prepare a set of upgrade instructions which may, for complex
  or major upgrades, be in the form of a permanent document added
  to the doc/ directory or, for straight forward and routine
  upgrades, simply an email.

:sectnums!:
[#appx-A]
== Appendix A: Additional software requirements for development
//FIXME? this section should really be moved to the (under
// construction) development Guide.  Counter argument: the
// "Preparing a Release" section says to build docs which
// requires this software.
For building documentation:

[none]
* **asciidoctor**: doc/src/*.asc => *.html
* **dia**: doc/src/schema.dia => schema.png diagram.
* **libreoffice writer**:  doc/src/schema.odt => schema.pdf

== Appendix B: Operational tools
These are tools for use at installed JMdictDB sites and are
located in bin/.

  bulkupd.py:: Allows making similar changes to a large number
    of database entries at once.
  conj.py::
  dbcheck.py::
  dbreaper.py::
  entrs2xml.py:: Produce a JMdict or JMnedict XML file from
   the database contents.  This does the inverse of jmparse.py.
  ex2txt.py:: Produce a Tatoeba sentence examples file from
    data in a JMdictDB database.  This does the inverse of
    exparse.py.
  exparse.py:: Parse a Tatoeba sentence examples file into a
    form suitable for loading into a JMdictDB database by
    pgload.  Normally run by Makefile-db.  This does the inverse
    of ex2txt.py.
  jelload.py::
  jmdbss.txt::
  jmparse.py:: Parse a JMdict or JMnedict XML file into a
    form suitable for loading into a JMdictDB database by
    pgload.  Normally run by Makefile-db.  This does the inverse
    of entr2xml.py.
  kdparse.py:: Parse a kanjdic XML file into a
    form suitable for loading into a JMdictDB database by
    pgload.  Normally run by Makefile-db.  These is not currently
    a program to produce a kanjidic XML file from database data.
  mklabels.py::
  pgload.py:: Loads the intermediate file produced ny
    jmparse.py, kdparse.py or exparse.py into a JMdictDB
    database.  Normally run by Makefile-db.
  shentr.py:: A command line program that can display entries
    from a JMdictDB database.
  users.py:: A program for managing (adding, deleting modifying)
    users in the jmsess database.
  xresolv.py:: This is run after pgload.py loads a corpus into
    a JMdictDB database and attempts to resolve (produce xrefs
    from) the unresolved xrefs generated by pgload.py.  Normally
    run by Makefile-db.

== Appendix C: Build and development tools
These are programs that are used in the development of JMdictDB,
either for debugging or as part of that toolchains used for
packaging, and distributing the software.

=== Debugging and development tools
  dbcompare.py::
  dbg-parser.py::
  dbversion.py:: Show the database version number of a chosen
    database or all JMdictDB databases and whether or nor it
    is compatible the the current JMdictDB code.
  dtdcheck.py::
  hggit.py:: Maps between old Mercurial and current Git revision
   number.
  jmbuild.py::
  jmextract.py::
  kwcmp.py::
  run-flask.py:: Run the JMdictDB Flask app in debugging mode.
  upd-version.py:: Update the jmdictdb/_version__.py file based
    of the current Git revision number.
  xmlarch.sh:: A script that can be run regularly by cron to check
    a JMdict or JMnedict XML file and save a copy of the DTD if
    it has changed since the last run.

=== Build tools
These are part of the build toolchains and usually invoked by a
Makefile or script; they seldom need to be manually run.

  install.sh:: Run by Makefile to install command line programs and
    CGI scripts.  replaces the target file only id the source and
    target file contents differ determine by checksum).
  gen_parsetab.py::
  yply.py:: Used in the build process by jmdictdb/Makefile to
    convert the YACC grammar that jmdictdb/jelparse.y is written
    in, into a format understood by the ply parser-generator.

//FIXME: check the yply description above.
=== One-time or obsolete tools
  lic-replace.py:: A quick hack that was used to replace the full
    GPL license text in source files with a short SPID license
    identifier.
  mkiso639maps.py::
  mkkwmod.py::
  mklang.py::
