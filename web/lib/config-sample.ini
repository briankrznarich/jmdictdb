########################################################################
#
#   config-sample.ini
#   This file is an example of the contents of config.ini.
#   It also serves to document all available settings and their
#   default values.
#
#   The config.ini file contains global configuration settings
#   that control the operation of an individual instance of a
#   JMdictDB system.  Only settings whose values differ from the
#   defaults shown here need be present in the config.ini file.
#
#   *** CAUTION ***
#   If config.ini contains database passwords or other sensitive
#   information it should be protected appropriately, typically
#   by making it readable only by the webserver process.
#   Alternatively those settings can be moved into a file named
#   in the PVT setting of the "config" section below and that
#   file protected while this file remains publicly accessible.
#
########################################################################

[config]
  # Optional name of a second, private, configuration file that
  # can be protected from public access and use to hold private
  # information such as database access credentials.  If a relative
  # path is given it is relative to this file's directory.  For
  # example:
  #   PRIVATE = config-pvt.ini
  # If not provided no other configuration files other than the
  # main one will be read.
#PRIVATE =

[web]

  # Email address that will appear at the bottom of each
  # cgi web page as the contact for questions etc., for example:
  #   CONTACT_EMAIL = jimbreen@edrdg.org
  # If not provided no contact address will be shown.
#CONTACT_EMAIL =

  # The directory in which the jmdictdb CGI scripts will look
  # for either of the control files "status_maint" or "status_load".
  # If either is present (contents are ignored) then the script
  # will return a redirect to one of the static HTML pages,
  # "../status_maint.html" or "../status_load.html" according to
  # the control file name.  The html filenames and location are not
  # currently configurable.  Note that "../" is the parent directory
  # of the CGI directory.
#STATUS_DIR = .

  # Database to use if no svc parameter given.
#DEFAULT_SVC = db_jmdict

# The following control the number of entries that the search
# page will show on the search results page (web/cgi/srchres.py).

  # Default entries per page, if not overridden in url.
#DEF_ENTRIES_PER_PAGE = 100

  # Absolute maximum/minimum number of entries per page
  # regardless of any value provided in url.
#MAX_ENTRIES_PER_PAGE = 1000
#MIN_ENTRIES_PER_PAGE = 1

#=======================================================================
[logging]

  # Name (optionally including path) to a logfile that will be used
  # by the CGI scripts in web/cgi/ when they are invoked without any
  # command line arguments (typically the case when they are invoked
  # by a web server.)  When set to an empty value or not present,
  # logging output will be directed to stderr.  For cgi files served
  # by a web server, stderr  output commonly ends up in the web server's
  # error logs.  Relative paths are relative to the config file directory.
  # By convention this is often set to "jmdictdb.log".
  # Note that the file has to exist (JMdictDB won't create it) and
  # the web server process must have permission to write to it.
#LOG_FILENAME =

  # The default logging level.  Each logging message generated by
  # the code has an associated log level: CRITICAL (highest), ERROR,
  # WARNING, INFO, DEBUG (lowest).  (In this file log levels can be
  # given in either case.)  A message will be output to the logfile
  # if its log level is equal or greater that LOG_LEVEL.  If not it
  # will be discarded (but see "Filters" belows for making fine-tuned
  # exceptions to this.)  If not present, the default value is "info".
#LOG_LEVEL = info

  # Filters:
  # A list of log levels and regex patterns that request logging
  # message output for certain messages whose log level is lower
  # than LOG_LEVEL.
  # - Each filter is on a separate line with no intervening blank
  #   or comment lines and must be indented relative to the
  #   "LOG_FILTERS=" line.
  # - A filter consists of an initial (case-insensitive) letter
  #   from the set ('w', 'i', 'd'} (corresponding to the logging
  #   levels, WARNING, INFO, DEBUG) optionally preceeded by a "!"
  #   character.  The remainder of the string is a regular expression.
  # - Logging messages with a level greater or equal to LOG_LEVEL
  #   will be output as expected regardless of filters.
  # - Messages with a level less than the logger's level will be
  #   compared with each filter in the order given looking for a
  #   match: the message's log level is greater or equal to the
  #   filter's log level and message's source (logger name) matches
  #   the filter's regex.  Matching is not "anchored"; e.g., if you
  #   want to match messages starting with "abc", use "^abc".
  # - If the matched filter was not preceeded with a "!" the log
  #   message will be printed and no further filters will be compared.
  # - If the matched filter was preceeded with a "!" the log message
  #   will not be printed and no further filters will be compared.
  # - If the log message matched no filters it will not be output.
  #
  # Example:
  # Assume LOG_LEVEL is set to "warning", and LOG_FILTERS is set so:
  #   LOG_FILTERS =
  #     !D^xx
  #     Dyes$
  #
  # If the following log messages are generated they will be handled
  # as noted in the comments:
  #
  #   L('test_yes').debug('wow')       # Printed (matched filt#2)
  #   L('test_no').debug('no see me')  # Not printed (no match)
  #   L('test_no').error('see me!')    # Printed (no match but msg
  #                                    #  level >= logger level.
  #   L('xx_yes').info('but not me')   # Not printed (neg. match)
  #
  # Note that if the order of the two filters were reversed, the
  # forth message would be output because the 'Dyes$' filter would
  # match before the '!D^xx' filter could reject it.
  #
  # To show comprehensive messages related to submissions:
  #  LOG_FILTERS =
  #    D^cgi.edsubmit

#LOG_FILTERS =

#=======================================================================
[search]

  # If ENABLE_SQL_SEARCH is "no" or undefined, do not allow the
  # search results page (web/cgi/srchres.py) to process "sql"
  # url parameters.
  # Otherwise, it may have either of the values "all" or "editors"
  # to allow it to accept a 'sql' parameter from any user, or only
  # from logged in editors respectively.  This requires that the
  # database have special users added for use by JMdictDB app
  # (typically with the name "jmdictdbv"), the config.ini file to
  # be configured to use them (in the db_* sections), and that that
  # security be set on all jmdictdb database objects correctly.
  # If these are not done correctly, a user enabled by ENABLE_SQL_SEARCH
  # could delete or inappropriately change database data.
  # Users for which the sql search feature is not enabled will get
  # and error message should they try to submit a sql search.
#ENABLE_SQL_SEARCH = no

  # Maximumum time (in millseconds) to allow a search query to
  # run in the database.  If exceeded, the query will timeout
  # and and error page shown to the user.  This helps prevent
  # denial of service problems that could result from pathological
  # searches submitted by users.
#SEARCH_TIMEOUT = 3000

#=======================================================================
# Database authorization settings may be added here or in a
# separate file, "config-pvt.ini".  See config-pvt-sample.ini
# for format details.
